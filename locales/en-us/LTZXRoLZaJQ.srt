1
00:00:00,620 --> 00:00:04,410
So here's a way to define is_palindrome. So we're taking

2
00:00:04,410 --> 00:00:06,580
a single string as an output, I will call it s,

3
00:00:07,700 --> 00:00:10,030
and we're first going to test the base case. So the

4
00:00:10,030 --> 00:00:13,870
base case was to see if the string is empty, we

5
00:00:13,870 --> 00:00:16,350
should return true right away. So we can do that

6
00:00:16,350 --> 00:00:19,460
with an if. We are gonna check if s is equal

7
00:00:19,460 --> 00:00:23,100
to the empty string, and if it is, we return true,

8
00:00:23,100 --> 00:00:25,730
that's our base case. For the else, we have the recursive

9
00:00:25,730 --> 00:00:30,360
case so now we need to do the test of the first and the last characters to

10
00:00:30,360 --> 00:00:32,600
see if they match. And we can do that

11
00:00:32,600 --> 00:00:35,960
using the string indexing operators, as 0 gets us

12
00:00:35,960 --> 00:00:40,080
the first character, s negative 1 gets us the

13
00:00:40,080 --> 00:00:44,330
last character. If they match, then we need to

14
00:00:44,330 --> 00:00:47,490
check the rest of the string. If they didn't

15
00:00:47,490 --> 00:00:50,610
match and let's finish the didn't match case first.

16
00:00:50,610 --> 00:00:52,950
So if they didn't match then we know it is

17
00:00:52,950 --> 00:00:55,140
a palindrome, because we found a place where the first and

18
00:00:55,140 --> 00:00:57,880
the last character did not match, so we should return

19
00:00:57,880 --> 00:01:01,680
false right away. If they did match, well then we have

20
00:01:01,680 --> 00:01:04,769
the harder problem. We need to do the recursive call

21
00:01:04,769 --> 00:01:07,690
to check all the other letters in the strings still form

22
00:01:07,690 --> 00:01:12,170
a palindrome. So this was our starting string. It had

23
00:01:12,170 --> 00:01:16,170
all these characters in it. We checked that this one matches

24
00:01:16,170 --> 00:01:20,610
this one, so now what we need to do is take the rest of the string and check

25
00:01:20,610 --> 00:01:22,980
if this is a palindrome. So that'll be a

26
00:01:22,980 --> 00:01:26,662
recursive call, so we're going to return the result, of calling

27
00:01:26,662 --> 00:01:30,850
is_palindrome. But instead of passing in s, what we

28
00:01:30,850 --> 00:01:33,590
want to do is pass in the string starting from

29
00:01:33,590 --> 00:01:37,085
position 1 of s, so removing the first character,

30
00:01:37,085 --> 00:01:41,890
and ending at position negative 1, removing the last character.

31
00:01:41,890 --> 00:01:44,604
And remember with our indexing, the last value here is

32
00:01:44,604 --> 00:01:47,735
not included. So by having the last index as negative

33
00:01:47,735 --> 00:01:50,570
1, that removes the final letter of the string. So

34
00:01:50,570 --> 00:01:54,230
the first thing to test is the base case. So

35
00:01:54,230 --> 00:01:57,330
we'll pass in the empty string. And the empty string

36
00:01:57,330 --> 00:01:59,470
is a palindrome, so it should give us the result

37
00:01:59,470 --> 00:02:03,340
true, which it does. Let's try the single letter string,

38
00:02:03,340 --> 00:02:07,650
a, that's also a palindrome. It's the same backwards and forwards.

39
00:02:07,650 --> 00:02:13,250
And so we also get the value true, if we try say string ab, which is not a

40
00:02:13,250 --> 00:02:19,065
palindrome. We get false. As a longer test, if we

41
00:02:19,065 --> 00:02:25,070
try a level, we should get true. Which we do. And, let's try

42
00:02:25,070 --> 00:02:31,440
one of the most famous palindromes, amanaplanacanalpanama.

43
00:02:32,730 --> 00:02:35,330
And we should get True which we do.

44
00:02:35,330 --> 00:02:39,050
[BLANK_AUDIO]

