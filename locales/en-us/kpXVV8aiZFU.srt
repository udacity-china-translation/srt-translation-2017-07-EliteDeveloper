1
00:00:00,460 --> 00:00:03,610
So the answer, is yes, we have a good recursive

2
00:00:03,610 --> 00:00:06,689
definition, no matter what we pass in for t and

3
00:00:06,689 --> 00:00:09,410
p, we'll eventually get a result, and the reason for

4
00:00:09,410 --> 00:00:12,717
that is because every time we do a recursive call, the

5
00:00:12,717 --> 00:00:15,650
value that's passed in for t, is one less than

6
00:00:15,650 --> 00:00:20,730
the previous value, and eventually, if we start with an integer.

7
00:00:20,730 --> 00:00:22,840
And we keep reducing it, eventually we're going to get to

8
00:00:22,840 --> 00:00:25,540
the case where t is equal to 0, and then we

9
00:00:25,540 --> 00:00:29,210
have a base case. We can return the value one, without using the

10
00:00:29,210 --> 00:00:31,450
popularity function again. So this is

11
00:00:31,450 --> 00:00:33,650
a good recursive definition. It will always

12
00:00:33,650 --> 00:00:38,290
produce a result. It might not produce a meaningful measure of popularity, but

13
00:00:38,290 --> 00:00:41,810
if this is how we define popularity, this code will always produce a result.

