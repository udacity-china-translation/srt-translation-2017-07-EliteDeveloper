1
00:00:00,430 --> 00:00:04,400
So the answer is 13. And the reason for this is quite

2
00:00:04,400 --> 00:00:07,140
interesting. If you look at the answers we were getting so far, this

3
00:00:07,140 --> 00:00:11,790
is the number of calls for each number. So when we had fibo

4
00:00:11,790 --> 00:00:16,940
36, the number of calls was 1. When the input was 35,

5
00:00:19,240 --> 00:00:26,010
the number of calls was also 1. When the input was 34, the number of calls was 2.

6
00:00:26,010 --> 00:00:28,400
When the input was 33, the number of calls

7
00:00:28,400 --> 00:00:32,189
was 3. When the input was 32, the number

8
00:00:32,189 --> 00:00:35,220
of calls was 5. We should start to

9
00:00:35,220 --> 00:00:39,190
notice a pattern. This is exactly the Fibonacci series

10
00:00:39,190 --> 00:00:42,420
that we're computing here. Every time we decrease n

11
00:00:42,420 --> 00:00:44,770
by 1, so to get the number of calls

12
00:00:44,770 --> 00:00:51,670
for 32, we added the number of calls for 1 before and the number of calls for

13
00:00:51,670 --> 00:00:53,950
2 before, and if you look at the structure

14
00:00:53,950 --> 00:00:56,950
of this, it follows from the same rule that

15
00:00:56,950 --> 00:01:00,320
we had, thinking about the number of rabbits reproducing.

16
00:01:00,320 --> 00:01:03,600
That everyone that we have on the previous level,

17
00:01:03,600 --> 00:01:07,140
leads to two more. And that means as we

18
00:01:07,140 --> 00:01:09,720
do this addition, we have all the previous calls.

19
00:01:09,720 --> 00:01:12,430
So we had 1 call the 34 at the

20
00:01:12,430 --> 00:01:15,180
previous level. We're going to produce two new calls but

21
00:01:15,180 --> 00:01:16,850
the inputs are different. But if we look at

22
00:01:16,850 --> 00:01:20,140
the way the inputs are distributed, we have 2 plus

23
00:01:20,140 --> 00:01:28,180
1 here. We have 1 plus 1 for 34. We have 2 plus 1 for 33. For 32 we

24
00:01:28,180 --> 00:01:31,020
have 2 plus 3. We have 5. For 31,

25
00:01:31,020 --> 00:01:35,250
we're going to have eight calls, and for 30, we're going to

26
00:01:35,250 --> 00:01:37,050
have 5 plus 8, which is 13. And

27
00:01:37,050 --> 00:01:40,240
this will keep going. These numbers will get quite

28
00:01:40,240 --> 00:01:43,135
big very fast. And the number of calls we

29
00:01:43,135 --> 00:01:47,580
need, every time we evaluate fibo 36, so the

30
00:01:47,580 --> 00:01:50,350
evaluate the number of calls, when we started

31
00:01:50,350 --> 00:01:53,540
with 36 that's going to be the result of fibo

32
00:01:53,540 --> 00:01:57,030
36 minus n minus 1. So the number of

33
00:01:57,030 --> 00:02:00,430
calls we'll need to fibo 2 in evaluating fibo

34
00:02:00,430 --> 00:02:04,090
36 will be fibo 33 calls, and we don't

35
00:02:04,090 --> 00:02:06,590
know what that number is yet. Because when we tried

36
00:02:06,590 --> 00:02:10,850
to evaluate fibonacci 36, using our recursive definition, our

37
00:02:10,850 --> 00:02:14,210
evaluator timed out, so we're in big trouble. If we

38
00:02:14,210 --> 00:02:16,610
want to figure out how many calls there are,

39
00:02:16,610 --> 00:02:19,630
we need a more efficient way of computing Fibonacci numbers.

40
00:02:20,680 --> 00:02:23,320
So let's see if we can do that. And

41
00:02:23,320 --> 00:02:25,540
the reason this was so inefficient was because we're doing

42
00:02:25,540 --> 00:02:28,202
all this redundant work, right? We saw that to

43
00:02:28,202 --> 00:02:32,712
compute fibonacci 36, well we had to compute fibonacci 35,

44
00:02:32,712 --> 00:02:35,746
and we had to compute fibonacci 34, all of

45
00:02:35,746 --> 00:02:39,560
this work computing fibonacci 34. We did the same exact

46
00:02:39,560 --> 00:02:42,040
thing over here, right? This is producing the same

47
00:02:42,040 --> 00:02:45,790
output. There's tons and tons of redundant computation going on.

48
00:02:45,790 --> 00:02:48,200
So if we're going to compute this more efficiently, we

49
00:02:48,200 --> 00:02:50,700
don't want to duplicate all that work. We need to do

50
00:02:50,700 --> 00:02:52,760
it in a way, where we don't need

51
00:02:52,760 --> 00:02:55,780
to keep recomputing the same thing. So the solution

52
00:02:55,780 --> 00:02:59,980
to this, is instead of using a recursive procedure

53
00:02:59,980 --> 00:03:03,390
to compute fibonacci. We're going to compute fibonacci using

54
00:03:03,390 --> 00:03:06,900
a while loop. Anything that we can define recursively,

55
00:03:06,900 --> 00:03:09,550
we can also define without using a recursive definition.

56
00:03:10,650 --> 00:03:12,690
It's often much easier and cleaner to think about

57
00:03:12,690 --> 00:03:15,840
things, with a recursive definition, but it's often not

58
00:03:15,840 --> 00:03:18,450
the fastest way to calculate things. And certainly, in this

59
00:03:18,450 --> 00:03:22,210
case, because of all the redundant computation, it's a very, very

60
00:03:22,210 --> 00:03:26,100
inefficient way to calculate fibonacci. So let's try to do this

61
00:03:26,100 --> 00:03:29,020
with a while loop instead and we'll make that a quiz.

