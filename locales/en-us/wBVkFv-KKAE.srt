1
00:00:00,000 --> 00:00:03,570
So here's a file in sublime, where we're going to put some of the code for

2
00:00:03,570 --> 00:00:04,100
our game.

3
00:00:04,100 --> 00:00:06,990
I'm going to save this as run.js.

4
00:00:06,990 --> 00:00:08,550
Maybe we'll call the game run.

5
00:00:08,550 --> 00:00:10,460
So where should we start our program?

6
00:00:10,460 --> 00:00:12,110
Let's add some cars to the program,

7
00:00:12,110 --> 00:00:15,830
which we can represent using values that are stored in variable.

8
00:00:15,830 --> 00:00:19,600
So if we call the first enemy driver in this game amy,

9
00:00:19,600 --> 00:00:23,170
then we might make a variable for her car that we would give that same name.

10
00:00:23,170 --> 00:00:26,980
In that variable, we'll store an object to represent amy's car.

11
00:00:26,980 --> 00:00:30,810
As you add lines of code to your program, you'll expect a different in-memory

12
00:00:30,810 --> 00:00:33,980
model to be built up by your program as it's running.

13
00:00:33,980 --> 00:00:37,400
So here, I'm going to build a diagram that you can see what I

14
00:00:37,400 --> 00:00:41,280
believe the in-memory model should be as a result of the code that I'm writing.

15
00:00:41,280 --> 00:00:45,380
You'll see that in this diagram, we have a box, which is a global variable.

16
00:00:45,380 --> 00:00:48,390
And it points to some in-memory value.

17
00:00:48,390 --> 00:00:53,170
Now these two boxes are extremely different in that one of them, represents

18
00:00:53,170 --> 00:00:58,700
the idea of a variable and the other represents the idea of an in-memory object.

19
00:00:58,700 --> 00:01:00,793
Variables are allowed to point to objects and

20
00:01:00,793 --> 00:01:03,778
that's why this arrow extends from the variable to the object.

21
00:01:03,778 --> 00:01:06,981
To keep track of how far along the street amy's car is,

22
00:01:06,981 --> 00:01:09,850
her object should include a location property.

23
00:01:09,850 --> 00:01:13,940
And that property will point to some number reflecting her position.

24
00:01:13,940 --> 00:01:18,370
Now the number is an object too, just like nearly every value in JavaScript is.

25
00:01:18,370 --> 00:01:21,430
Here you can see the amy object, the object stored in

26
00:01:21,430 --> 00:01:26,700
the variable amy has a property .loc, which is pointing to yet another object.

27
00:01:26,700 --> 00:01:29,810
That object is itself, representative of the number 1.

28
00:01:29,810 --> 00:01:35,248
Now somewhere, your program might try to move that car further along the street.

29
00:01:35,248 --> 00:01:39,028
And even though the code for a real game would be more complex than this,

30
00:01:39,028 --> 00:01:43,000
we can show that change on just one line in order to keep our example simple.

31
00:01:43,000 --> 00:01:46,701
Now since there are many enemies in this game, there will be some point down

32
00:01:46,701 --> 00:01:50,406
the line where you'll probably find yourself building a second object and

33
00:01:50,406 --> 00:01:53,578
then you'll repeat a lot of the same code that you did already for

34
00:01:53,578 --> 00:01:54,733
the first car object.

35
00:01:54,733 --> 00:01:55,532
Now of course,

36
00:01:55,532 --> 00:01:59,540
the sample code that we see here in run.js is ridiculously oversimplified.

37
00:01:59,540 --> 00:02:03,300
But it gives us just enough of an example that we can start to

38
00:02:03,300 --> 00:02:05,430
demonstrate the techniques for improving it.

39
00:02:05,430 --> 00:02:07,460
So we should be asking ourselves the question.

40
00:02:07,460 --> 00:02:10,440
What parts of this code are repeated and

41
00:02:10,440 --> 00:02:14,350
might be good to move out into some area of reusable code.

42
00:02:14,350 --> 00:02:16,010
So just take a moment to look at this code and

43
00:02:16,010 --> 00:02:18,720
ask yourself, which parts you'd like to factor out.

44
00:02:18,720 --> 00:02:20,140
I see two of them.

45
00:02:20,140 --> 00:02:23,950
I see that we're repeatedly building objects that look pretty similar and

46
00:02:23,950 --> 00:02:28,040
I see that we are then incrementing the location property of those objects.

47
00:02:28,040 --> 00:02:30,000
I'm going to focus on the second of them.

48
00:02:30,000 --> 00:02:33,120
Let's take a look at how we would use a function in order to remove this

49
00:02:33,120 --> 00:02:36,090
code duplication of incrementing the location property
