1
00:00:00,180 --> 00:00:02,810
But take a look at how this changes our diagram.

2
00:00:02,810 --> 00:00:06,280
In the old version, we had only one function object because it

3
00:00:06,280 --> 00:00:09,280
had been defined outside of the carlike function.

4
00:00:09,280 --> 00:00:12,040
Now, as a result of the fact that we moved the source code for

5
00:00:12,040 --> 00:00:15,340
that move method up into the body of the carlike function, we now

6
00:00:15,340 --> 00:00:19,520
have a new function being generated every time we run the carlike function.

7
00:00:19,520 --> 00:00:23,180
This is a high price to pay for the simplicity of having all of your code show

8
00:00:23,180 --> 00:00:27,290
up at the same level of indentation inside the body of the carlike function.

9
00:00:27,290 --> 00:00:30,840
People are often confused why it would be the case that moving the function

10
00:00:30,840 --> 00:00:35,570
definition up into the body of this function would result in there being many

11
00:00:35,570 --> 00:00:40,190
move methods, many different function objects, one per instance of a car.

12
00:00:40,190 --> 00:00:42,600
Let's open a new file to examine that point.

13
00:00:42,600 --> 00:00:47,030
This simple maker function builds and returns a brand new object.

14
00:00:47,030 --> 00:00:49,450
So after calling makeAnObject twice and

15
00:00:49,450 --> 00:00:53,870
storing each of the results in a variable, do you expect the two objects that

16
00:00:53,870 --> 00:00:58,140
are stored in these two variables to be the exact same or to be two objects that

17
00:00:58,140 --> 00:01:02,020
look quite similar because of the similarities in their properties.

18
00:01:02,020 --> 00:01:05,830
Another way of asking this is would they pass a strict comparison of

19
00:01:05,830 --> 00:01:07,660
their identity using triple equals?
