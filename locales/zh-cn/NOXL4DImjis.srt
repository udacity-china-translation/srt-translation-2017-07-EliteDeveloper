1
00:00:00,000 --> 00:00:04,000
有一种用 index(索引) 来定义 find_element 的方式

2
00:00:04,000 --> 00:00:07,000
在元素确实存在于 p 的情况下 

3
00:00:07,000 --> 00:00:09,000
index 准确给出我们想要的结果

4
00:00:09,000 --> 00:00:14,000
所以我们可以使用一个 if 语句 用 t in p 来检查 t 是否在 p 中 

5
00:00:14,000 --> 00:00:18,000
如果 t 确实在 p 中 if 语句块就返回那个值

6
00:00:18,000 --> 00:00:21,000
它返回 p.index(t)

7
00:00:21,000 --> 00:00:24,000
对于这个 else 子句 元素不存在于 p 中 

8
00:00:24,000 --> 00:00:26,000
所以我们返回 -1

9
00:00:26,000 --> 00:00:30,000
我们还有另一种使用 index 的方法来定义 find_element

10
00:00:30,000 --> 00:00:34,000
这次 我们不检查 t 在 p 中 而是检查 t 不在 p 中

11
00:00:34,000 --> 00:00:38,000
如果 t 不在 p 中  那么我们就知道结果是 -1

12
00:00:38,000 --> 00:00:40,000
我们可以立即返回 -1

13
00:00:40,000 --> 00:00:43,000
如果我们到下一个语句 那么我们知道 t 在 p中

14
00:00:43,000 --> 00:00:47,000
我们可以通过传入 t 来返回 p.index 的结果 

15
00:00:47,000 --> 00:00:50,000
我们已经看到了四种定义 find_element 的不同方法

16
00:00:50,000 --> 00:00:54,000
它们的功能完全相同 但我们分别用了 while 循环 

17
00:00:54,000 --> 00:00:58,000
for 循环 和使用 index 的两种不同方法进行了定义

18
00:00:58,000 --> 00:01:01,000
使用 index 时 我们还需要用到一个 if 语句 

19
00:01:01,000 --> 99:59:59,000
以保证在元素不存在于 p 的情况下 生成正确的结果

