1
00:00:00,000 --> 00:00:02,047
定义 add_to_index 的方法很多

2
00:00:02,047 --> 00:00:03,094
现在介绍其中一种

3
00:00:03,093 --> 00:00:07,036
我们将创建一个过程 叫做 add_to_index

4
00:00:07,036 --> 00:00:11,009
包含三次输入：索引、关键词、和 URL

5
00:00:11,009 --> 00:00:16,054
add_to_index 中 首先需要确认这个关键词是否已经出现过

6
00:00:16,054 --> 00:00:19,054
那么 就需要对索引中的所有元素进行检索

7
00:00:19,054 --> 00:00:22,025
正常做法是使用 for 循环

8
00:00:22,025 --> 00:00:24,076
所以是先定义 add_to_index 这一过程

9
00:00:24,076 --> 00:00:28,082
这需要三次输入 索引、关键词、和 URL

10
00:00:28,082 --> 00:00:30,036
来帮助我们对现在所做工作进行跟踪

11
00:00:30,036 --> 00:00:34,049
我先画下索引的数据结构作为提醒

12
00:00:34,049 --> 00:00:36,088
请记得这是一个元素列表

13
00:00:36,088 --> 00:00:38,064
每个元素本身也是一个列表

14
00:00:38,064 --> 00:00:44,067
第一部分是关键词 第二部分是 URL 列表

15
00:00:44,067 --> 00:00:46,064
这是我们的数据结构

16
00:00:46,064 --> 00:00:50,054
这一概念会帮我们了解如何对 add_to_index 进行定义

17
00:00:50,054 --> 00:00:51,082
第一个任务

18
00:00:51,082 --> 00:00:56,015
是检查关键词是否已经存在于索引中了

19
00:00:56,015 --> 00:01:01,009
如果找到了该关键词 则需修改元素 而不要创建新元素

20
00:01:01,009 --> 00:01:03,063
如前 通常做法是使用 for 循环

21
00:01:03,063 --> 00:01:06,040
我们会对索引中的元素进行循环

22
00:01:06,040 --> 00:01:09,087
将之称作 entry 用在程序块中

23
00:01:09,087 --> 00:01:12,037
这就是 entry 了

24
00:01:12,037 --> 00:01:16,043
第一次循环 entry 的值将会作为这个列表的参考

25
00:01:16,043 --> 00:01:20,040
这是索引列表的第一个元素

26
00:01:20,040 --> 00:01:22,051
现在需要找出关键词

27
00:01:22,051 --> 00:01:26,039
就在这里 条目零位置上的元素

28
00:01:26,039 --> 00:01:31,018
我们会对该位置的值做出判断

29
00:01:31,018 --> 00:01:33,061
是否与传入关键词吻合

30
00:01:33,061 --> 00:01:35,052
所以将用双等于号来判断

31
00:01:35,052 --> 00:01:38,052
如果相等 那么我们找到了匹配词

32
00:01:38,052 --> 00:01:45,075
即需要将 URL 附加入 URL 列表中与该元素建立关联

33
00:01:45,075 --> 00:01:46,072
要获得 URL 列表

34
00:01:46,072 --> 00:01:52,074
需要找到 entry[1] 就是位置1上的值

35
00:01:52,075 --> 00:01:55,048
还要附加新 URL

36
00:01:55,048 --> 00:01:59,051
这里 我们找到一个 entry 与我们寻找的关键词相符

37
00:01:59,051 --> 00:02:02,009
这说明关键词已经包含在索引里了

38
00:02:02,009 --> 00:02:06,058
我们也往 URL 列表中添加了新 URL 并与该关键词建立了关联

39
00:02:06,058 --> 00:02:08,030
所以 大功告成 没有其他操作要做了

40
00:02:08,030 --> 00:02:12,012
需要确认的是 我们不会再继续进行其他操作

41
00:02:12,012 --> 00:02:15,026
有一个方法可能会被用到 那就是 break 它将会终止该循环

42
00:02:15,026 --> 00:02:18,015
而我们真正想要做的是结束整个过程

43
00:02:18,015 --> 00:02:22,073
如果我们 break 那么就仍然有接下来的问题

44
00:02:22,074 --> 00:02:24,034
--如何处理没有找到关键词的情况

45
00:02:24,033 --> 00:02:26,018
这里我们直接使用 return--

46
00:02:26,018 --> 00:02:30,068
add_to_index 过程已经完成 也添加了属于该索引的 URL

47
00:02:30,068 --> 00:02:32,094
现在则要思考 在以下情况下

48
00:02:32,093 --> 00:02:37,006
即索引中尚无该关键词时 该怎么做了

49
00:02:37,006 --> 00:02:41,096
如果是这种情况 那么我们循环遍历到最后 也不会找到对应的关键词

50
00:02:41,096 --> 00:02:42,036
如果我们已经到达循环的最后

51
00:02:42,036 --> 00:02:47,039
就意味着我们在索引中未找到任何匹配关键词的元素

52
00:02:47,039 --> 00:02:50,013
那么就需要添加新元素

53
00:02:50,013 --> 00:02:52,063
这个新元素 它的值

54
00:02:52,062 --> 00:02:56,007
是一个包含两个元素的列表 这就是关键词了

55
00:02:56,008 --> 00:02:57,068
第二个元素

56
00:02:57,068 --> 00:03:02,031
则是包含 URL 的列表 这些 URL 包含该关键词

57
00:03:02,031 --> 00:03:06,028
目前我们只有1个 URL 即调用 add_to_index 传入的 URL

58
00:03:06,027 --> 00:03:07,067
该如何处理？

59
00:03:07,068 --> 00:03:11,006
在 add_to_index 中加入新元素 我们的做法是使用 append

60
00:03:11,006 --> 00:03:15,056
我们需要传入来进行添加索引 这就是需要添加的结构

61
00:03:15,056 --> 00:03:17,075
这一整套就是我们要添加的内容

62
00:03:17,074 --> 00:03:21,095
这是一个列表 包含了关键词这一值作为第一个元素

63
00:03:21,096 --> 00:03:27,010
第二个元素是包含了单个URL的列表

64
00:03:27,010 --> 00:03:29,033
这是我们

65
00:03:29,033 --> 99:59:59,000
在索引中未找到关键词时要附加的内容

