1
00:00:00,516 --> 00:00:03,140
现在你已将 @bitmap 复制到了 face 方法

2
00:00:03,140 --> 00:00:04,419
我们来看看代码

3
00:00:04,418 --> 00:00:06,528
位图默认是不可变的

4
00:00:06,530 --> 00:00:08,060
也就是说它们不可更改

5
00:00:08,060 --> 00:00:10,870
因此我们必须创建一个可变版本的背景

6
00:00:10,868 --> 00:00:11,898
图像

7
00:00:11,900 --> 00:00:14,050
下一步是缩放表情符号位图

8
00:00:14,050 --> 00:00:15,859
使它与脸部正确匹配

9
00:00:15,859 --> 00:00:17,649
确定方法是从 face 对象

10
00:00:17,649 --> 00:00:19,958
获取脸部尺寸

11
00:00:19,960 --> 00:00:22,179
然后给它乘以一个常数

12
00:00:22,178 --> 00:00:24,250
首先设置这个常数等于 1

13
00:00:24,250 --> 00:00:25,995
这不会使表情符号有任何缩放

14
00:00:25,995 --> 00:00:28,329
如果你不喜欢表情符号的大小

15
00:00:28,329 --> 00:00:30,158
则可以在这里更改

16
00:00:30,160 --> 00:00:32,978
对我来说 表情符号在未缩放时似乎有点大

17
00:00:32,978 --> 00:00:35,798
因此我将此常数设为 0.9

18
00:00:35,798 --> 00:00:38,588
下一步是确定表情符号位图

19
00:00:38,590 --> 00:00:41,180
在人脸上的正确位置

20
00:00:41,179 --> 00:00:43,859
Google 表情符号的宽比高略大

21
00:00:43,859 --> 00:00:46,130
我发现将其降低三分之一

22
00:00:46,130 --> 00:00:48,639
正好可以和人脸匹配

23
00:00:48,639 --> 00:00:50,179
当然 你也可以随意调整它

24
00:00:50,179 --> 00:00:52,130
来移动表情符号 

25
00:00:52,130 --> 00:00:55,250
接下来我们创建一个 canvas 对象 然后绘制我们的背景

26
00:00:55,250 --> 00:00:57,350
位图和表情符号位图 以

27
00:00:57,350 --> 00:00:59,870
得到最终的组合图像

28
00:00:59,868 --> 00:01:03,149
最后一步是返回生成的位图

29
00:01:03,149 --> 00:01:04,950
好的 现在我们有了将表情符号

30
00:01:04,950 --> 00:01:07,950
添加到人脸并返回组合位图的方法

31
00:01:07,950 --> 00:01:10,359
但是我们应在哪里调用此方法呢？

32
00:01:10,358 --> 00:01:12,396
每张照片可能包含多张人脸

33
00:01:12,396 --> 00:01:14,019
我们应该使用以下策略

34
00:01:14,019 --> 00:01:16,929
来为所有表情符号创建一个最终位图

35
00:01:16,930 --> 00:01:19,180
我们从一个名为 resultBitmap 的变量开始

36
00:01:19,180 --> 00:01:22,180
在做任何处理之前将其初始化为这张照片

37
00:01:22,180 --> 00:01:24,160
然后检测其中的人脸

38
00:01:24,159 --> 00:01:25,780
接下来 我们从第一个开始

39
00:01:25,780 --> 00:01:27,460
遍历人脸

40
00:01:27,459 --> 00:01:30,069
然后选择可画的适当表情符号

41
00:01:30,069 --> 00:01:32,149
调用 addBitmapToFace 方法

42
00:01:32,150 --> 00:01:36,370
传入最初照片、所选的表情符号

43
00:01:36,370 --> 00:01:38,710
以及 face 对象 并将结果设为

44
00:01:38,709 --> 00:01:40,149
等于 resultBitmap

45
00:01:40,150 --> 00:01:43,830
以将它作为我们下一个迭代的基础

46
00:01:43,828 --> 00:01:47,458
然后我们转到下一个迭代 下一张人脸

47
00:01:47,459 --> 00:01:48,768
然后重复此过程

48
00:01:48,769 --> 00:01:50,310
只是这次传入 

49
00:01:50,310 --> 00:01:52,290
addBitmapToFace 方法的原始照片

50
00:01:52,290 --> 00:01:54,870
包含前面迭代的表情符号

51
00:01:54,870 --> 00:01:58,800
这样每个循环都会向图像添加表情符号

52
00:01:58,799 --> 00:02:02,009
要将这个转换为代码 我们先为位图创建一个变量

53
00:02:02,010 --> 00:02:04,920
叫作 resultBitmap 并在人脸 for 循环之前 将其

54
00:02:04,920 --> 00:02:07,439
初始化为来自相机的

55
00:02:07,438 --> 00:02:09,239
初始照片位图

56
00:02:09,240 --> 00:02:13,120
在 for 循环结束后 一旦选好

57
00:02:13,120 --> 00:02:17,330
正确的可画表情符号 我们调用 addBitmapToFace

58
00:02:17,330 --> 00:02:19,090
传入 resultBitmap（在这个例子中

59
00:02:19,090 --> 00:02:22,750
是原始图像）、所选的 emojiBitmap

60
00:02:22,750 --> 00:02:24,937
以及 face 对象

61
00:02:24,937 --> 00:02:27,228
此方法的结果应再次分配

62
00:02:27,229 --> 00:02:28,669
给 resultBitmap

63
00:02:28,669 --> 00:02:31,308
以在下次迭代中 组合的位图

64
00:02:31,310 --> 00:02:33,770
被用作下一个表情符号的背景

65
00:02:33,770 --> 00:02:37,719
且每个人脸被处理并覆盖上表情符号

66
00:02:37,718 --> 00:02:40,810
在 MainActivity 中 将检测人脸

67
00:02:40,810 --> 00:02:44,949
的调用更改为重新命名的 detectfacesandOverlayemoji

68
00:02:44,949 --> 00:02:48,250
方法 并将结果分配给 mResultsBitmap

69
00:02:48,250 --> 00:02:50,949
这样你就可以将最终组合的位图

70
00:02:50,949 --> 00:02:52,949
设为 ImageView

