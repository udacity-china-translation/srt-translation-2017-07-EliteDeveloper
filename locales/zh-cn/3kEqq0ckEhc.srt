1
00:00:00,000 --> 00:00:02,000
这是 get_next_target (找到下一目标) 的过程

2
00:00:02,000 --> 00:00:04,000
我们知道如何利用多重赋值

3
00:00:04,000 --> 00:00:06,000
从该过程中得到2个结果

4
00:00:06,000 --> 00:00:10,000
但是我们先要解决一个严重的问题

5
00:00:10,000 --> 00:00:15,000
才能输出页面上的所有链接

6
00:00:15,000 --> 00:00:18,000
我们没有仔细思考

7
00:00:18,000 --> 00:00:22,000
如果输入没有另一个链接 结果会怎样

8
00:00:22,000 --> 00:00:26,000
让我们来试试看 程序会输出什么结果

9
00:00:26,000 --> 00:00:29,000
这是我们为 get_next_target 写的代码 我们来试着运行一下

10
00:00:29,000 --> 00:00:31,000
先来看看有链接的情况

11
00:00:31,000 --> 00:00:35,000
当这是传入的页面时

12
00:00:35,000 --> 00:00:38,000
我们得到的下一目标应该是这里所包含的链接

13
00:00:38,000 --> 00:00:45,000
在双引号之间 超链接标签里

14
00:00:45,000 --> 00:00:48,000
运行这些代码 我们得到2个输出

15
00:00:48,000 --> 00:00:51,000
我们得到这个字符串 也就是这个链接

16
00:00:51,000 --> 00:00:54,000
还有37 也就是引用结束的位置

17
00:00:54,000 --> 00:00:57,000
这两个输出作为一个元组被打印出来

18
00:00:57,000 --> 00:01:00,000
意味着 第一个 第二个

19
00:01:00,000 --> 00:01:04,000
括在括弧里 我们可以通过一个这样的赋值得到该结果

20
00:01:04,000 --> 00:01:08,000
但是我们想利用双重赋值

21
00:01:08,000 --> 00:01:12,000
得到这些输出 并且只打印 URL (网址) 

22
00:01:12,000 --> 00:01:17,000
得到字符串 http://udacity.com

23
00:01:17,000 --> 00:01:19,000
这运行得不错

24
00:01:19,000 --> 00:01:21,000
现在我们不传入一个有链接的页面

25
00:01:21,000 --> 00:01:24,000
而是让传入的内容不包含链接

26
00:01:24,000 --> 00:01:28,000
比如 就只是文本 good 

27
00:01:28,000 --> 00:01:31,000
现在就没有链接可找了

28
00:01:31,000 --> 00:01:34,000
但代码还是会运行

29
00:01:34,000 --> 00:01:37,000
我们得到的结果是 goo 

30
00:01:37,000 --> 00:01:39,000
这可能并不是我们想要的

31
00:01:39,000 --> 00:01:43,000
我们得到 goo 这一结果 是因为这个 find 指令

32
00:01:43,000 --> 00:01:46,000
如果它找不到它想要找的 就会返回-1

33
00:01:46,000 --> 00:01:52,000
当我们将-1作为索引 也就是字符串的最后一个字符

34
00:01:52,000 --> 00:01:56,000
我们最终得到的就是除去最后一个字符外的所有字符

35
00:01:56,000 --> 00:02:00,000
如果我们传入的内容包含有双引号

36
00:02:00,000 --> 00:02:05,000
现在我们传入 Not good at all!

37
00:02:05,000 --> 00:02:08,000
我们得到的结果就是 Not

38
00:02:08,000 --> 00:02:10,000
这不是很有用

39
00:02:10,000 --> 00:02:12,000
而且比较混乱

40
00:02:12,000 --> 00:02:15,000
很难知道我们什么时候得到最后一个目标

41
00:02:15,000 --> 00:02:19,000
因为 Not 可能是一个有效网址 但我们不知道

42
00:02:19,000 --> 00:02:22,000
我们想让 get_next_target 返回更有用的结果

43
00:02:22,000 --> 00:02:27,000
当输入不包含链接时

44
00:02:27,000 --> 00:02:30,000
怎么做部分取决于你们

45
00:02:30,000 --> 00:02:32,000
但我会给你们一点小提示

46
00:02:32,000 --> 00:02:34,000
我们想要更改代码

47
00:02:34,000 --> 00:02:38,000
你们要在这儿加一些代码

48
00:02:38,000 --> 00:02:41,000
如果我们找到一个链接 初始链接已经有一个值了

49
00:02:41,000 --> 00:02:43,000
这是初始链接的位置

50
00:02:43,000 --> 00:02:46,000
如果我们没找到链接 我们从 find 得到的就是-1

51
00:02:46,000 --> 00:02:50,000
我想让你们修改 get_next_target 程序

52
00:02:50,000 --> 00:02:52,000
当找不到链接时

53
00:02:52,000 --> 00:02:54,000
我们能返回 none

54
00:02:54,000 --> 00:02:57,000
这是一个特殊的值 表示什么都没有

55
00:02:57,000 --> 00:03:00,000
并且我们会返回0作为结束位置

56
00:03:00,000 --> 00:03:03,000
让我写得更准确一些 但是提示是

57
00:03:03,000 --> 00:03:05,000
你们将更改这些代码

58
00:03:05,000 --> 00:03:07,000
在你们找到初始链接

59
00:03:07,000 --> 00:03:09,000
知道能否找到链接后

60
00:03:09,000 --> 00:03:12,000
本次小练习的任务是

61
00:03:12,000 --> 00:03:14,000
修改我们之前定义的 get_next_target 过程

62
00:03:14,000 --> 00:03:18,000
如果有链接 结果不变

63
00:03:18,000 --> 00:03:21,000
仍然返回目标链接的网址

64
00:03:21,000 --> 00:03:26,000
以及表示引用结束位置的数字

65
00:03:26,000 --> 00:03:29,000
但如果输入的字符串中没有链接

66
00:03:29,000 --> 00:03:31,000
第一个输出应该是 None

67
00:03:31,000 --> 00:03:34,000
第二个输出应该是0 None 是一个特殊值

68
00:03:34,000 --> 99:59:59,000
表示程序什么都没有返回

