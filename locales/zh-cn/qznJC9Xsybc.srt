1
00:00:00,000 --> 00:00:02,000
我们还有一个关于使用列表的小练习

2
00:00:02,000 --> 00:00:05,000
它会把我们目前学到的许多知识都梳理一遍

3
00:00:05,000 --> 00:00:08,000
做完练习后 我们就可以开始建我们的网络爬虫了

4
00:00:08,000 --> 00:00:12,000
对于这个小练习 你的目标是定义一个名为 union 的过程

5
00:00:12,000 --> 00:00:15,000
这个过程取两个列表作为输入

6
00:00:15,000 --> 00:00:18,000
它应修改第一个输入列表的值 

7
00:00:18,000 --> 00:00:23,000
这样当 union 返回其值时 该输入列表现在就是两个输入列表的并集 (union) 了

8
00:00:23,000 --> 00:00:25,000
当我们计算一个集合并集时 

9
00:00:25,000 --> 00:00:29,000
我们应把第二个列表中所有元素都加到第一个列表中 

10
00:00:29,000 --> 00:00:31,000
元素已经存在的情况除外

11
00:00:31,000 --> 00:00:35,000
我们加入已经存在的元素时 不应产生重复的元素

12
00:00:35,000 --> 00:00:38,000
这里有几个例子

13
00:00:38,000 --> 00:00:42,000
如果你从变量 a 开始 即列表1 2 3 

14
00:00:42,000 --> 00:00:45,000
和变量 b 即列表2 4 6 

15
00:00:45,000 --> 00:00:48,000
接着我们调用 union 传入 a 和 b

16
00:00:48,000 --> 00:00:53,000
调用之后 a 的值应为列表1 2 3 4 6

17
00:00:53,000 --> 00:00:58,000
我们已经把 b 的元素加到了 a 中 只不过我们跳过了第一个元素 

18
00:00:58,000 --> 00:01:01,000
也就是值2 因为2已在 a 中

19
00:01:01,000 --> 00:01:04,000
我要指出 union 不应修改 b 的值

20
00:01:04,000 --> 00:01:11,000
调用了 union(a,b) 后 b 的值应仍为列表2 4 6

21
00:01:11,000 --> 99:59:59,000
你试试看能否按照以上描述来定义 union 过程

