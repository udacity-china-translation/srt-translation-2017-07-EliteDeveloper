1
00:00:00,000 --> 00:00:02,083
现在 我们来动手操作

2
00:00:02,083 --> 00:00:05,102
开始编写我们的首个简单的用户界面测试

3
00:00:05,102 --> 00:00:07,560
由于用户与设备的大多数交互

4
00:00:07,559 --> 00:00:10,050
都是通过视图 不难理解 Espresso

5
00:00:10,050 --> 00:00:13,230
简化了测试视图的流程

6
00:00:13,230 --> 00:00:15,390
对于 TeaTime 我想要确保正常运行

7
00:00:15,390 --> 00:00:17,310
的一个重要 UI 组件是

8
00:00:17,309 --> 00:00:19,709
我们的 OrderActivity 的加号按钮

9
00:00:19,710 --> 00:00:21,420
点击此按钮应增加

10
00:00:21,420 --> 00:00:24,150
订购的数量以及

11
00:00:24,149 --> 00:00:26,036
相应的杯数对应的价格

12
00:00:26,036 --> 00:00:28,619
现在 我想确保编写此测试 因为

13
00:00:28,620 --> 00:00:31,086
我可不想跟一大早喝不到咖啡的

14
00:00:31,086 --> 00:00:32,670
沮丧买家闹不和

15
00:00:32,670 --> 00:00:35,730
更不想这是因为他们无法将商品添加到订单

16
00:00:35,729 --> 00:00:37,979
那么我们如何编写这个测试呢？

17
00:00:37,979 --> 00:00:40,926
这里我下载并运行起始代码

18
00:00:40,926 --> 00:00:43,259
我也在讲师笔记中提供了代码链接

19
00:00:43,259 --> 00:00:44,369
以防你需要

20
00:00:44,369 --> 00:00:46,000
我们要编写的测试

21
00:00:46,000 --> 00:00:48,270
将是一项设备化单元测试

22
00:00:48,270 --> 00:00:51,180
记住 这些位于 src/

23
00:00:51,179 --> 00:00:54,125
AndroidTest/Java 下

24
00:00:54,125 --> 00:00:55,799
目前在此目录下 我

25
00:00:55,799 --> 00:00:58,199
创建了一个 ExampleInstrumentedTest

26
00:00:58,200 --> 00:01:01,890
但这个测试文件中还什么都没有

27
00:01:01,890 --> 00:01:04,829
假设我要在此文件夹中创建一项新测试

28
00:01:04,829 --> 00:01:07,289
在 project 视图中 导航

29
00:01:07,290 --> 00:01:10,700
至包 右击并转置“新建”(New)

30
00:01:10,700 --> 00:01:14,750
然后选 Java Class 然后在这里给测试命名

31
00:01:14,750 --> 00:01:18,150
我将称之为 OrderActivityBasicTest

32
00:01:18,150 --> 00:01:19,950
注意在我命名文件时

33
00:01:19,950 --> 00:01:22,560
我非常具体 甚至在名称中

34
00:01:22,560 --> 00:01:25,439
说明了它是一项测试

35
00:01:25,439 --> 00:01:28,140
我之所以这么做是希望其他

36
00:01:28,140 --> 00:01:31,320
阅读我代码的开发人员知道我在测试什么

37
00:01:31,319 --> 00:01:35,129
以及此文件是一个测试文件

38
00:01:35,129 --> 00:01:36,839
现在 在开始运行测试之前 我需要

39
00:01:36,840 --> 00:01:39,540
添加必要的 Gradle 依赖关系

40
00:01:39,540 --> 00:01:42,930
那么向下导航至 app 级的 build.gradle 文件

41
00:01:42,930 --> 00:01:46,470
在下面的 dependencies 部分 我添加两个 Android 测试

42
00:01:46,469 --> 00:01:48,870
编译依赖项

43
00:01:48,870 --> 00:01:53,189
我在这里添加的第一个用于支持注解

44
00:01:53,189 --> 00:01:56,039
它会在项目中启用注解

45
00:01:56,040 --> 00:01:58,830
我们将很快介绍注解是什么

46
00:01:58,829 --> 00:02:02,700
我添加的第二个允许我们使用特殊测试

47
00:02:02,700 --> 00:02:04,380
我想特意调出

48
00:02:04,379 --> 00:02:08,250
以确保 Android 测试编译和编译的依赖项

49
00:02:08,250 --> 00:02:11,669
的支持注解版本

50
00:02:11,669 --> 00:02:12,539
匹配

51
00:02:12,539 --> 00:02:16,349
我在这两处都用了 25.1.0 版本

52
00:02:16,349 --> 00:02:18,569
现在我们跳回 Android Activity

53
00:02:18,569 --> 00:02:19,799
BasicTest

54
00:02:19,800 --> 00:02:23,430
在这个文件中以 @Runwith 开头

55
00:02:23,430 --> 00:02:27,030
调用 Android JUnit 4 类注释

56
00:02:27,030 --> 00:02:29,159
这里的这行让 Android Studio 知道

57
00:02:29,159 --> 00:02:34,669
我想使用 Android JUnit 4 运行此测试

58
00:02:34,669 --> 00:02:36,869
Android JUnit4 是一个类

59
00:02:36,870 --> 00:02:38,909
它将帮助我们控制应用启动

60
00:02:38,909 --> 00:02:41,840
以及在应用上运行 UI 测试

61
00:02:41,840 --> 00:02:44,340
你可能还注意到了 当我选择

62
00:02:44,340 --> 00:02:47,520
注解时 关键字以此 @ 符号开头

63
00:02:47,520 --> 00:02:50,430
Android Studio 帮我自动完成了它

64
00:02:50,430 --> 00:02:53,219
这是因为我在前面的 Gradle 文件中

65
00:02:53,219 --> 00:02:55,050
设定了支持注解

66
00:02:55,050 --> 00:02:57,420
你在编写测试时会

67
00:02:57,419 --> 00:03:00,780
用到多个注解 但注解的概念

68
00:03:00,780 --> 00:03:02,159
对你来说应该不陌生

69
00:03:02,159 --> 00:03:06,789
你可能看到过 @Override 就像这样

70
00:03:06,789 --> 00:03:09,359
这是一个标签 会让 Android Studio 知道我们

71
00:03:09,360 --> 00:03:12,060
分类了一个特定方法 并提供了

72
00:03:12,060 --> 00:03:13,560
我们自己的实现

73
00:03:13,560 --> 00:03:17,740
同样 我们将用到 @Runwith、

74
00:03:17,740 --> 00:03:20,879
@Rule 和 @Tests 等注解

75
00:03:20,879 --> 00:03:22,650
所有这些注解向

76
00:03:22,650 --> 00:03:25,860
Android 表明我们的测试代码中的特定部分

77
00:03:25,860 --> 00:03:29,040
需要特殊处理

78
00:03:29,039 --> 00:03:31,929
我先将它们删掉

79
00:03:31,930 --> 00:03:33,629
在测试的正文部分 我想

80
00:03:33,629 --> 00:03:35,699
首先使用 @Rule 注解添加

81
00:03:35,699 --> 00:03:41,909
我们的 Activity 测试规则 ActivityTestRule 是

82
00:03:41,909 --> 00:03:46,676
为特定的单个 Activity 提供功能测试的规则

83
00:03:46,676 --> 00:03:48,509
现在在这些尖括号内 由于我们

84
00:03:48,509 --> 00:03:52,169
专注于 OrderActivity 我将它添加在这里

85
00:03:52,169 --> 00:03:55,719
然后我将完成此规则的其余语法

86
00:03:55,719 --> 00:03:57,449
现在编写实际的测试

87
00:03:57,449 --> 00:03:59,969
我以 @Test 注解开始

88
00:03:59,969 --> 00:04:02,490
这表明这是我们测试所感兴趣的东西

89
00:04:02,490 --> 00:04:04,439
的地方

90
00:04:04,439 --> 00:04:07,229
和之前一样 在创建测试名称时

91
00:04:07,229 --> 00:04:08,909
选择一个能够明确说明

92
00:04:08,909 --> 00:04:10,859
此测试目的的名称 这对你

93
00:04:10,860 --> 00:04:12,930
作为一名开发人员会很有用

94
00:04:12,930 --> 00:04:14,819
同样也有助于阅读你的代码的其他人

95
00:04:14,819 --> 00:04:18,060
理解此测试的具体目的

96
00:04:18,060 --> 00:04:21,689
对于这个例子 我将其命名为 clickIncrementButton

97
00:04:21,689 --> 00:04:23,100
ChangesQuantityAndCost()

98
00:04:25,829 --> 00:04:27,990
现在对于测试正文

99
00:04:27,990 --> 00:04:31,949
回想我们之前讲的编写 UI 测试所需的三个步骤

100
00:04:31,949 --> 00:04:34,769
第一步 我们需要找到增量按钮

101
00:04:34,769 --> 00:04:38,969
我们使用 onView 和 withID 方法

102
00:04:38,970 --> 00:04:42,330
调查具体的增量按钮 ID

103
00:04:42,329 --> 00:04:45,014
接下来 我们要对它执行的操作是点击它

104
00:04:45,014 --> 00:04:46,930
我直接在上面的同一行中

105
00:04:46,930 --> 00:04:50,610
这样做 因为此操作方法

106
00:04:50,610 --> 00:04:53,720
是针对同一个视图

107
00:04:53,720 --> 00:04:57,360
最后 我们需要验证增量按钮能够

108
00:04:57,360 --> 00:04:58,870
发挥我们期望的作用

109
00:04:58,870 --> 00:05:00,879
那么我们期望发生什么呢？

110
00:05:00,879 --> 00:05:03,360
首先 我们期望数量文本增加 1

111
00:05:03,360 --> 00:05:06,550
且价格文本视图增加

112
00:05:06,550 --> 00:05:09,699
一小杯咖啡的价钱

113
00:05:09,699 --> 00:05:12,639
在这里一杯咖啡是 $5

114
00:05:12,639 --> 00:05:15,870
我们将这两个断言写出来

115
00:05:15,870 --> 00:05:20,199
我们的两个期望是数量增加 1

116
00:05:20,199 --> 00:05:25,870
且价格增加一小杯咖啡的价格

117
00:05:25,870 --> 00:05:28,509
最后一步是运行测试 检查看它是否

118
00:05:28,509 --> 00:05:29,560
通过测试

119
00:05:29,560 --> 00:05:33,379
那么要运行它 前往文件 右击

120
00:05:33,379 --> 00:05:35,560
然后下到“运行”(Run)

121
00:05:35,560 --> 00:05:39,319
我们可以从下面的运行窗口看到测试结果

122
00:05:39,319 --> 00:05:42,310
这个绿色条表示我们运行的所有测试

123
00:05:42,310 --> 00:05:44,470
都成功了 如果测试

124
00:05:44,470 --> 00:05:47,730
失败了 我们会在这里看到一个红色条

125
00:05:47,730 --> 00:05:48,230
好的

126
00:05:48,230 --> 00:05:51,280
现在 轮到你为自己的第一个 Espresso 测试编码了

127
00:05:51,279 --> 00:05:54,129
我想让你向你的项目文件

128
00:05:54,129 --> 00:05:56,680
添加一项 OrderActivityBasicTest 但这次

129
00:05:56,680 --> 00:05:59,959
我们不是测试用户点击增量按钮后

130
00:05:59,959 --> 00:06:02,079
数量和价格的变化

131
00:06:02,079 --> 00:06:04,180
而是检查当用户点击减量按钮时

132
00:06:04,180 --> 00:06:06,590
会发生什么

133
00:06:06,589 --> 00:06:09,069
首先 我想让你查看 

134
00:06:09,069 --> 00:06:12,019
0.1 练习提交

135
00:06:12,019 --> 00:06:15,859
在这里面 在我们的 OrderActivityBasicTest 文件下

136
00:06:15,860 --> 00:06:18,910
你会注意到我添加了一系列 TODO 项

137
00:06:18,910 --> 00:06:20,740
以帮助你完成测试

138
00:06:20,740 --> 00:06:24,040
那么请完成这些 TODO 项 运行测试

139
00:06:24,040 --> 00:06:26,020
然后验证它是否通过

140
00:06:26,019 --> 00:06:28,629
我在讲师注释中添加了一些提示

141
00:06:28,629 --> 00:06:31,540
以及此特定提交的链接

142
00:06:31,540 --> 00:06:34,850
现在轮到你进行测试实践了

143
00:06:34,850 --> 00:06:38,110
在这个练习中 确保你的代码开始时

144
00:06:38,110 --> 00:06:44,500
匹配 Teaesp.03-Exercise 的代码阶段

145
00:06:44,500 --> 00:06:47,019
我想让你完成 OrderSummaryActivityTest

146
00:06:47,019 --> 00:06:51,699
的编写 并提供了一些 TODO 项来帮助你

147
00:06:51,699 --> 00:06:54,569
此测试的目的是测试

148
00:06:54,569 --> 00:06:57,189
发送自 OrderSummaryActivity 的邮件 Intent

149
00:06:57,189 --> 00:06:58,839
我将留给你来决定

150
00:06:58,839 --> 00:07:01,750
此例子适合用 intent stub 还是 intent

151
00:07:01,750 --> 00:07:03,189
verification

152
00:07:03,189 --> 00:07:06,759
那么 请完成 OrderSummaryActivityTest.java

153
00:07:06,759 --> 00:07:10,000
和 build.gradle 文件中的 TODO 项

154
00:07:10,000 --> 00:07:14,259
运行测试并验证是否通过测试

155
00:07:14,259 --> 00:07:16,300
如果需要提示 请参见讲师注释

156
00:07:16,300 --> 00:07:19,720
下的链接获取有用资源

157
00:07:19,720 --> 00:07:21,540
祝你好运

