1
00:00:00,000 --> 00:00:05,000
在演讲中 Dave 指出这两个函数

2
00:00:05,000 --> 00:00:07,000
hashtable-update 和 hashtable-lookup

3
00:00:07,000 --> 00:00:09,000
使用一些类似的功能

4
00:00:09,000 --> 00:00:13,000
我们可以把它放在一个单独的程序里

5
00:00:13,000 --> 00:00:16,000
看看这里的 hashtable-update 和 lookup 程序

6
00:00:16,000 --> 00:00:21,000
我们看到这些代码完全相同 就是这两行

7
00:00:21,000 --> 00:00:25,000
在这两个函数中 这两行代码走遍了指定的“桶”

8
00:00:25,000 --> 00:00:28,000
搜寻第一个值等于 key 的项目

9
00:00:28,000 --> 00:00:31,000
所以我们要做的是 取得这段代码

10
00:00:31,000 --> 00:00:34,000
将其移到一个单独的 helper 函数

11
00:00:34,000 --> 00:00:36,000
这称为重构 (refactoring)

12
00:00:36,000 --> 00:00:38,000
重构 (refactoring) 是常见的软体工程实践 (practice)

13
00:00:38,000 --> 00:00:41,000
我们改变了代码 但是没有更改功能

14
00:00:41,000 --> 00:00:43,000
这么做有一些原因

15
00:00:43,000 --> 00:00:47,000
例如 在这里我们是为了尽量减少重复的代码

16
00:00:47,000 --> 00:00:51,000
这令人满意 因为如果我们想要改变 这两行代码运作的方式

17
00:00:51,000 --> 00:00:53,000
或许我们改变了“桶”的结构

18
00:00:53,000 --> 00:00:56,000
我们不想看遍每个哈希表函数

19
00:00:56,000 --> 00:00:58,000
搜寻这是如何运作的 并且更新它们

20
00:00:58,000 --> 00:01:00,000
而我们只是想要在一个地方做更新

21
00:01:00,000 --> 00:01:04,000
这减少了臭虫 (bug) 而且节省时间  现在 让我们试一试

22
00:01:04,000 --> 00:01:06,000
这里我建了一个新函数 称为 bucket-find

23
00:01:06,000 --> 00:01:11,000
你应该看到它与 update 和 lookup 的代码非常相似

24
00:01:11,000 --> 00:01:14,000
在这里 我们要走遍“桶”来搜寻项目

25
00:01:14,000 --> 00:01:18,000
项目中第一个值等于 key 然后传回整个项目

26
00:01:18,000 --> 00:01:21,000
因此我们可以在 update 和 lookup 使用它

27
00:01:21,000 --> 00:01:25,000
现在有了 helper 函数  让我们使用它来改变我们的哈希表函数

28
00:01:25,000 --> 00:01:29,000
产生的代码会变得更简单也更短

29
00:01:29,000 --> 00:01:31,000
我已经改变了 hashtable-update

30
00:01:31,000 --> 00:01:33,000
我们在第一行找到了“桶”

31
00:01:33,000 --> 00:01:37,000
然后在“桶”里 我们要搜寻 key

32
00:01:37,000 --> 00:01:40,000
如果找到了这个项目 我们要更新值

33
00:01:40,000 --> 00:01:44,000
否则我们要把 key 和 value 加到“桶”的末尾

34
00:01:44,000 --> 00:01:46,000
它看起来比原始函数来的简单

35
00:01:46,000 --> 00:01:48,000
让我们对 lookup 做同样的事

36
00:01:48,000 --> 00:01:50,000
在新的 hashtable-lookup 我们首先找到“桶”

37
00:01:50,000 --> 00:01:52,000
然后在“桶”里 我们搜寻项目

38
00:01:52,000 --> 00:01:55,000
如果这个项目不是 None 我们传回第二个值

39
00:01:55,000 --> 00:01:58,000
否则我们传回 None