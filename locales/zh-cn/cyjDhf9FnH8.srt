1
00:00:00,352 --> 00:00:02,310
Fragment第一步是将屏幕

2
00:00:02,310 --> 00:00:05,759
上半部分的图像视图替换为简单的 ExoPlayer

3
00:00:05,759 --> 00:00:07,389
视图

4
00:00:07,389 --> 00:00:10,390
在 onCreate 中初始化视图 并将其设置为

5
00:00:10,390 --> 00:00:14,050
名为 mPlayerView 的成员变量

6
00:00:14,050 --> 00:00:15,730
然后将设置带作曲者照片的

7
00:00:15,730 --> 00:00:18,969
ImageView 的调用更改为以下调用

8
00:00:18,969 --> 00:00:22,029
这将加载问号位图作为背景图像

9
00:00:22,030 --> 00:00:24,339
直到用户回答了问题

10
00:00:24,339 --> 00:00:27,579
接下来 通过调用 Sample.getSampleById

11
00:00:27,579 --> 00:00:32,859
获取代表正确答案的样本对象 并传入答案样本

12
00:00:32,859 --> 00:00:34,200
ID

13
00:00:34,200 --> 00:00:37,570
然后 我们将使用这个初始化的 player 方法

14
00:00:37,570 --> 00:00:40,659
来创建一个简单的 exoPlayer 实例 它基本上是

15
00:00:40,659 --> 00:00:43,269
一个标准的简化 exoPlayer

16
00:00:43,270 --> 00:00:45,520
要创建一个简单的 exoPlayer 调用

17
00:00:45,520 --> 00:00:48,640
exoPlayer.newSimpleInstance 传入

18
00:00:48,640 --> 00:00:51,250
 Activity 上下文、默认的 TrackSelector

19
00:00:51,250 --> 00:00:53,500
和 loadControl

20
00:00:53,500 --> 00:00:56,799
接下来 你可以通过调用 mPlayerView.setPlayer

21
00:00:56,799 --> 00:01:00,119
将简单的 exoPlayer 视图连接到播放器 并传入

22
00:01:00,119 --> 00:01:03,099
简单的 exoPlayer 实例

23
00:01:03,100 --> 00:01:05,230
然后 我们需要准备媒体

24
00:01:05,230 --> 00:01:07,000
exoPlayer 中的每个媒体

25
00:01:07,000 --> 00:01:10,248
都用 mediaSource 对象表示

26
00:01:10,248 --> 00:01:12,039
你将需要使用以下类

27
00:01:12,040 --> 00:01:13,780
创建一个 mediaSource 对象

28
00:01:13,780 --> 00:01:16,090
ExtractorMediaSource 是用于使用常规媒体

29
00:01:16,090 --> 00:01:18,490
格式创建 mediaSource 的类

30
00:01:18,489 --> 00:01:21,459
而非我们谈论的自适应

31
00:01:21,459 --> 00:01:24,250
流媒体技术 如 DASH 或 HLS

32
00:01:24,250 --> 00:01:27,939
DefaultDataSourceFactory 是默认数据源工厂

33
00:01:27,939 --> 00:01:28,780
类

34
00:01:28,780 --> 00:01:31,280
你现在不用管它的具体细节

35
00:01:31,280 --> 00:01:34,299
但是它将在构造函数中需要这个

36
00:01:34,299 --> 00:01:35,469
UserAgent 字符串

37
00:01:35,469 --> 00:01:39,489
最后 是这个 DefaultExtractorsFactory 类

38
00:01:39,489 --> 00:01:41,709
跟前面一样 不用担心细节

39
00:01:41,709 --> 00:01:45,250
在大多数用例下 使用默认类可以很好地发挥作用

40
00:01:45,250 --> 00:01:48,519
你还需要一个样本 URI 你可以

41
00:01:48,519 --> 00:01:51,219
从之前创建的 sample 对象获取该 URI

42
00:01:51,219 --> 00:01:55,870
我在此将它传入了 initializePlayer 方法

43
00:01:55,870 --> 00:01:58,900
在创建 mediaSource 对象后 使用 prepare 方法

44
00:01:58,900 --> 00:02:01,540
将它传入播放器中

45
00:02:01,540 --> 00:02:03,880
然后你还应该调用 setPlayWhenReady

46
00:02:03,879 --> 00:02:06,789
然后传入 true 以使媒体

47
00:02:06,790 --> 00:02:08,960
在准备就绪时立即开始播放

48
00:02:08,960 --> 00:02:11,870
我们也可以在用户选择答案

49
00:02:11,870 --> 00:02:14,060
帮助显示正确答案时 在专辑封面视图中

50
00:02:14,060 --> 00:02:16,520
显示作曲者肖像

51
00:02:16,520 --> 00:02:20,540
在 showCorrectAnswer 方法中使用以下调用

52
00:02:20,539 --> 00:02:22,429
以更改专辑封面视图

53
00:02:22,430 --> 00:02:25,520
mPlayerView.setDefaultArtwork

54
00:02:25,520 --> 00:02:28,219
最后在 Activity 被摧毁时 我们要

55
00:02:28,219 --> 00:02:30,620
停止并释放播放器

56
00:02:30,620 --> 00:02:33,200
如果在应用不再可见时

57
00:02:33,199 --> 00:02:35,329
你不想让音乐继续 你实际上可以在 onPause 或

58
00:02:35,330 --> 00:02:37,080
onStop 中调用它

59
00:02:37,080 --> 00:02:39,260
但 Activity 仍在运行

60
00:02:39,259 --> 00:02:41,072
但是在这个用例中 我们

61
00:02:41,072 --> 00:02:43,280
可以让它继续播放 以使用户可以在音乐仍在播放时

62
00:02:43,280 --> 00:02:46,250
查看他们的文本消息或其他东西

63
00:02:46,250 --> 00:02:48,229
但是 一个风险是系统有可能

64
00:02:48,229 --> 00:02:51,169
摧毁 Activity 而意外

65
00:02:51,169 --> 00:02:52,699
终止播放

66
00:02:52,699 --> 00:02:55,429
好的 完成这些步骤后 运行应用

67
00:02:55,430 --> 00:02:57,590
你现在应该已经能够从这个

68
00:02:57,590 --> 00:03:00,140
简单的 exoPlayer 视图控制播放了 而无需连接

69
00:03:00,139 --> 00:03:01,713
任何侦听器

70
00:03:01,713 --> 00:03:03,379
这会在你在播放器视图上调用 setPlayer 时

71
00:03:03,379 --> 00:03:05,299
自动发生

72
00:03:05,300 --> 00:03:07,390
挺酷的 对吧？

