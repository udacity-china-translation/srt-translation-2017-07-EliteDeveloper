1
00:00:00,158 --> 00:00:04,271
这种方法我们称之为一个“过程”

2
00:00:04,270 --> 00:00:08,371
过程指的是获取输入

3
00:00:08,371 --> 00:00:10,550
输入可能不止一种

4
00:00:10,550 --> 00:00:12,765
对这些输入进行处理

5
00:00:12,765 --> 00:00:16,891
并得到输出作为结果

6
00:00:16,952 --> 00:00:20,271
过程这个概念非常有用

7
00:00:20,271 --> 00:00:22,818
它让我们得以使用少量的代码

8
00:00:22,818 --> 00:00:24,508
来做很多不同的事情

9
00:00:24,507 --> 00:00:27,131
我们可以用同样的代码运行不同的输入

10
00:00:27,146 --> 00:00:30,993
不论我们传递什么样的输入到过程当中

11
00:00:30,993 --> 00:00:33,031
我们所做的代码将会在该输入上运行

12
00:00:33,031 --> 00:00:35,459
根据输入的不同 代码可以做不同的任务

13
00:00:35,460 --> 00:00:38,259
它所生成的输出会告诉我们结果

14
00:00:38,259 --> 00:00:40,131
这取决于我们传递的输入

15
00:00:40,131 --> 00:00:42,466
在前一个单元

16
00:00:42,466 --> 00:00:44,692
你们看过与过程很类似的一些概念

17
00:00:44,692 --> 00:00:46,664
你们看过内置操作符

18
00:00:46,664 --> 00:00:48,521
像“+”这样的操作符

19
00:00:48,521 --> 00:00:50,765
“+”需要两个数字作为输入

20
00:00:50,765 --> 00:00:52,945
而输出

21
00:00:52,945 --> 00:00:55,899
就是这两个数字之和

22
00:00:55,899 --> 00:00:57,486
因为它是一个内置操作符

23
00:00:57,485 --> 00:00:59,283
它和过程有些许差异

24
00:00:59,283 --> 00:01:03,025
它们使用的语法不同 因为它是个内置操作符

25
00:01:03,026 --> 00:01:06,558
但它抽象地运行不同的输入

26
00:01:06,558 --> 00:01:08,560
并生成相应结果

27
00:01:08,560 --> 00:01:11,417
从这方面来说 理念是一样的

28
00:01:11,417 --> 00:01:12,820
我们将在这个单元学习

29
00:01:12,820 --> 00:01:14,777
如何写出自己的过程

30
00:01:14,777 --> 00:01:16,978
Python为此提供了一个构想

31
00:01:16,978 --> 00:01:19,709
其语法要有个关键词“def”

32
00:01:19,709 --> 00:01:21,842
它是“define”的简写

33
00:01:21,843 --> 00:01:23,643
后面跟着个名称

34
00:01:23,643 --> 00:01:26,504
过程的名称就像变量的名称

35
00:01:26,504 --> 00:01:29,283
它可以是任何以某个字母开头的字符串

36
00:01:29,283 --> 00:01:32,765
后面可以加上字母 数字和下划线

37
00:01:32,765 --> 00:01:34,740
任何可用作变量的字符

38
00:01:34,740 --> 00:01:37,227
亦可用作过程的名称

39
00:01:37,227 --> 00:01:39,293
然后还有个左括弧

40
00:01:39,293 --> 00:01:40,361
左括弧很重要

41
00:01:40,378 --> 00:01:42,617
它是过程的关键因素

42
00:01:42,617 --> 00:01:45,967
左括弧后面有一列参数

43
00:01:45,968 --> 00:01:50,432
参数只是为过程的输入起了个好听的名字

44
00:01:50,432 --> 00:01:53,084
之后 有个冒号

45
00:01:53,084 --> 00:01:56,290
这就是所谓的过程

46
00:01:56,290 --> 00:01:58,481
它有自己的名称

47
00:01:58,480 --> 00:01:59,471
需要这些输入

48
00:01:59,471 --> 00:02:01,704
接着我们必须要做的是定义代码

49
00:02:01,704 --> 00:02:04,293
所以名称后面是个“block”

50
00:02:04,293 --> 00:02:07,121
“block”就是一个语句序列

51
00:02:07,121 --> 00:02:09,719
就是我们想要运行的代码

52
00:02:09,719 --> 00:02:11,753
它是过程的主体

53
00:02:11,753 --> 00:02:13,289
输入就是

54
00:02:13,289 --> 00:02:17,127
一列名称 由逗号分隔开

55
00:02:17,127 --> 00:02:19,128
输入可以想有多少就有多少

56
00:02:19,128 --> 00:02:20,971
也可能没有输入

57
00:02:20,972 --> 00:02:24,948
在这种情况下 参数看上去就像2个括弧

58
00:02:24,948 --> 00:02:26,605
中间什么也没有

59
00:02:26,605 --> 00:02:29,713
可能只有一个输入

60
00:02:29,713 --> 00:02:30,239
在这种情况下 我们会先有个括弧 后面跟个名称

61
00:02:30,239 --> 00:02:32,609
最后再加一个括弧

62
00:02:32,609 --> 00:02:33,917
也可能会有很多输入

63
00:02:33,917 --> 00:02:35,854
在这种情况下 会有个括弧

64
00:02:35,854 --> 00:02:37,453
后面加上第一个输入的名称

65
00:02:37,454 --> 00:02:39,522
再加上第二个输入的名称

66
00:02:39,521 --> 00:02:41,722
再加上第三个输入的名称

67
00:02:41,723 --> 00:02:43,856
输入可以想加多少就加多少

68
00:02:43,855 --> 00:02:45,521
所以我们可以有五个输入

69
00:02:45,521 --> 00:02:48,128
将它们命名为“a” “b” “c” “d” “e”

70
00:02:48,128 --> 00:02:49,865
通常 给参数无意义的名称

71
00:02:49,866 --> 00:02:52,080
并不是个好主意

72
00:02:52,080 --> 00:02:54,229
因为我们在将代码写成“block”时会用到这些参数

73
00:02:54,229 --> 00:02:57,241
无意义的命名会让记住这些参数变得更困难

74
00:02:57,241 --> 00:02:59,798
如果用“page”这样的名称来命名参数会好得多

75
00:02:59,798 --> 00:03:02,611
因为它会提示我们这是什么意思

76
00:03:02,611 --> 00:03:04,429
过程的主体是“block”

77
00:03:04,429 --> 00:03:08,336
它是用来执行该过程的代码

78
00:03:08,336 --> 00:03:11,981
“block”在定义中是缩进的

79
00:03:11,981 --> 00:03:13,979
通常我们喜欢空四格

80
00:03:13,979 --> 00:03:15,552
那只是Python的一个习惯

81
00:03:15,551 --> 00:03:18,519
这会让人们更容易看到并读到代码

82
00:03:18,519 --> 00:03:21,460
但是“block”中每一行必须缩进同样的距离

83
00:03:21,460 --> 00:03:23,147
这样可以让解释器知道

84
00:03:23,147 --> 00:03:25,234
当我们写到不再缩进的代码时

85
00:03:25,235 --> 00:04:57,000
就是到达过程的结尾部分了

