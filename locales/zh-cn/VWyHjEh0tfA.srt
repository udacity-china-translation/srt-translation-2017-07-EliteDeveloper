1
00:00:00,569 --> 00:00:06,307
学生 W.Q. Feng 提问 什么时候你使用递回定义 而不是 while loop？

2
00:00:06,307 --> 00:00:12,210
所以这是一个好问题 就解决问题的角度来看

3
00:00:12,211 --> 00:00:15,954
你能以递回做的事 也能以 while loop 来做

4
00:00:15,954 --> 00:00:18,298
你能以 while loop 做的事 也能以递回来做

5
00:00:18,298 --> 00:00:20,475
无论以哪种方式 你都可以解决问题

6
00:00:20,475 --> 00:00:23,667
通常以 while loop 更有效率

7
00:00:23,667 --> 00:00:26,675
因为你没有额外的程序呼叫所产生的开销

8
00:00:26,675 --> 00:00:30,455
往往以递回解决问题 是一个更简单又优雅的解决方案

9
00:00:30,455 --> 00:00:34,756
所以取决于什么比较重要 很多时候权衡的结果是

10
00:00:34,756 --> 00:00:38,126
使用简单又优雅的解决方案比较好

11
00:00:38,127 --> 00:00:41,048
除非你真的仔细地为真正大的输入来计时

12
00:00:41,048 --> 00:00:43,777
你可能甚至无法测量性能的差异

13
00:00:43,777 --> 00:00:45,246
你不会发现有何不同

14
00:00:45,246 --> 00:00:48,115
所以 能获得正确的解决方案

15
00:00:48,115 --> 00:00:51,329
并且让程序易于编写 别人易于理解 是更重要的事

16
00:00:51,329 --> 00:00:54,350
在很多问题中 递回的解决方案真的能做到这些

17
00:00:54,350 --> 00:00:57,859
它的程序码比反覆运算的解决方案短很多

18
00:00:57,859 --> 00:01:00,190
而且它是易于理解和跟随

19
00:01:00,189 --> 00:01:04,331
在性能问题很重要时 我们之前看到的费波那西范例

20
00:01:04,331 --> 00:01:07,503
如果你最后呼叫的次数爆发

21
00:01:07,503 --> 00:01:09,594
使得以递回的方式 变得太慢

22
00:01:09,594 --> 00:01:13,367
你宁可使用更复杂的解决方案 像是使用 while loop 而且避免递回呼叫

