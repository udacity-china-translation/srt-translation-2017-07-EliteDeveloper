1
00:00:00,000 --> 00:00:04,000
对于这个问题 你需要定义两个过程

2
00:00:04,000 --> 00:00:12,000
第一个需要输入 匹配 (match) 和替换 (replacement)

3
00:00:12,000 --> 00:00:17,000
它要输出某种结构 未来可以使用的结构

4
00:00:17,000 --> 00:00:23,000
第二个程序 apply_converter 它会根据

5
00:00:23,000 --> 00:00:26,000
match 和 replacement 改变字符串

6
00:00:26,000 --> 00:00:28,000
我示范一个例子

7
00:00:28,000 --> 00:00:37,000
'aaabaa' 如果这是我们的 match 与 replacement 'aba' 将替换为 'b'

8
00:00:37,000 --> 00:00:42,000
我们得到的下一个字符串是 'aaba'

9
00:00:42,000 --> 00:00:46,000
然后我们再次得到 'aba' 我们将它替换为 'b'

10
00:00:46,000 --> 00:00:50,000
再也没有更多的匹配 (match) 所以我们停下来

11
00:00:50,000 --> 00:00:56,000
你可以看到每一步所做的改变  当我们无法再改变它 我们就停下来

12
00:00:56,000 --> 00:00:58,000
我们的代码要做的就是继续下去

13
00:00:58,000 --> 00:01:03,000
只要我们在上一步骤进行更换 我们会做下一步骤

14
00:01:03,000 --> 00:01:07,000
如果我们没有进行替换 那么就停下来

15
00:01:07,000 --> 00:01:09,000
我们来看代码

16
00:01:09,000 --> 00:01:11,000
我需要什么结构呢？

17
00:01:11,000 --> 00:01:17,000
嗯 我只要简单地制作一个列表 列表中的第一个项目就是 match

18
00:01:17,000 --> 00:01:20,000
第二个项目是 replacement

19
00:01:20,000 --> 00:01:26,000
apply_converter 的输入就是 我们以 make_converter 做出来的 converter

20
00:01:26,000 --> 00:01:31,000
那是一个列表 和我们想要更改的字符串

21
00:01:31,000 --> 00:01:37,000
我说过 我会继续改变字符串

22
00:01:37,000 --> 00:01:40,000
只要字符串和以前不一样

23
00:01:40,000 --> 00:01:44,000
我们要跟踪以前的字符串

24
00:01:44,000 --> 00:01:47,000
一开始 不存在以前的 (previous) 字符串

25
00:01:47,000 --> 00:01:54,000
当以前的 (previous) 字符串和目前的字符串 (string) 不同  我要继续这个循环

26
00:01:54,000 --> 00:01:59,000
一旦我进入循环 我要 previous 等于 string

27
00:01:59,000 --> 00:02:02,000
然后我要在字符串里寻找 match 字符串

28
00:02:02,000 --> 00:02:07,000
我们可以使用 find 找到 match 的位置

29
00:02:07,000 --> 00:02:11,000
我们要寻找 converter 的第一个词

30
00:02:11,000 --> 00:02:18,000
如果我们找到它 我们要将字符串替换成一个新字符串

31
00:02:18,000 --> 00:02:24,000
字符串的第一部分到这个位置 不包括它

32
00:02:24,000 --> 00:02:27,000
match 的起始位置

33
00:02:27,000 --> 00:02:34,000
我们以 replacement 做替换 最后 我们要连接

34
00:02:34,000 --> 00:02:37,000
match 后面的字符串

35
00:02:37,000 --> 00:02:41,000
我们从 match 的起始位置开始 找到它的位置

36
00:02:41,000 --> 00:02:45,000
加上 match 的长度

37
00:02:45,000 --> 00:02:48,000
然后 采用字符串直到结尾

38
00:02:48,000 --> 00:02:52,000
只要我们做了更改 循环继续

39
00:02:52,000 --> 00:02:59,000
如果我们没有进行更改 循环结束 我们会传回这个字符串

