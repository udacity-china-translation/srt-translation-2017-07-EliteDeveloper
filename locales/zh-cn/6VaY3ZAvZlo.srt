1
00:00:00,000 --> 00:00:02,000
为了解决这个问题 你必须充分理解

2
00:00:02,000 --> 00:00:05,000
原始函数 proc 的功能

3
00:00:05,000 --> 00:00:10,000
举这两个情况 它们真正地呈现了这个函数的输出

4
00:00:10,000 --> 00:00:14,000
有 2 个输入 但输出仅取决于 a 的值

5
00:00:14,000 --> 00:00:17,000
具体而言 该程序的值取决于 test(a)

6
00:00:17,000 --> 00:00:21,000
如果 test(a) 是 True 那么我们就传回第二个参数 b

7
00:00:21,000 --> 00:00:25,000
如果 test(a) 是 False 我们传回第一个参数 a

8
00:00:25,000 --> 00:00:28,000
我们需要对于每个函数做检查 让我们开始仔细检查

9
00:00:28,000 --> 00:00:34,000
proc1 如果 test(x) 第一个参数是 True 我们传回 y

10
00:00:34,000 --> 00:00:36,000
这与原始函数功能一致

11
00:00:36,000 --> 00:00:41,000
如果 test 第一个参数结果是 True 我们传回第二个参数 如同 proc1 的功能

12
00:00:41,000 --> 00:00:47,000
如果 test 第一个参数结果是 False 我们传回参数 x

13
00:00:47,000 --> 00:00:51,000
test(x) 是 False 这相当于 test(a) 是 False

14
00:00:51,000 --> 00:00:54,000
在这两种情况下 我们传回 a 和 x

15
00:00:54,000 --> 00:00:57,000
唯一的不同是 在这个函数中 相同的变量但名称不同

16
00:00:57,000 --> 00:01:00,000
这是相等的

17
00:01:00,000 --> 00:01:02,000
让我们看看第二个程序 proc2

18
00:01:02,000 --> 00:01:07,000
请注意 这个情况是根据 b 的值

19
00:01:07,000 --> 00:01:12,000
我们知道这不可能相当于我们的原始函数 proc

20
00:01:12,000 --> 00:01:16,000
因为这里的输出并非取决于 b 值

21
00:01:16,000 --> 00:01:20,000
我们马上就分辨出这是错的 这不等于我们的原始函数

22
00:01:20,000 --> 00:01:22,000
让我们看看 proc3

23
00:01:22,000 --> 00:01:27,000
这里的结构有些不同 但是让我们努力的解决这两个例子

24
00:01:27,000 --> 00:01:33,000
如果 test(a) 是 True 我们设 result 为 b 然后传回 result

25
00:01:33,000 --> 00:01:37,000
和我们的原始函数相同 如果 test(a) 是 True 我们传回 b

26
00:01:37,000 --> 00:01:42,000
如果 test(a) 是 False 我们只要传回 result 它一开始就设为 a 值

27
00:01:42,000 --> 00:01:47,000
所以整体的功能是：如果 test(a) 是 True 传回 b

28
00:01:47,000 --> 00:01:50,000
这与我们原始的函数定义相符合

29
00:01:50,000 --> 00:01:53,000
因此这相等于 proc

30
00:01:53,000 --> 00:01:56,000
现在 最后一个函数 proc4

31
00:01:56,000 --> 00:01:59,000
它可能会击退你 你看到 'udacity' 在引号中 这在其他函数中并不存在

32
00:01:59,000 --> 00:02:02,000
但重要的是 我们还是要努力的解决问题

33
00:02:02,000 --> 00:02:07,000
如果 test(a) 是 True 那么 not test(a) 是 False

34
00:02:07,000 --> 00:02:09,000
我们传回 b

35
00:02:09,000 --> 00:02:11,000
如果 test(a) 是 True 我们传回 b

36
00:02:11,000 --> 00:02:13,000
这与原始定义相符合

37
00:02:13,000 --> 00:02:16,000
如果 test(a) 是 False 而 not test(a) 是 True

38
00:02:16,000 --> 00:02:20,000
所以我们设 b 为 'udacity' 但是传回 a

39
00:02:20,000 --> 00:02:23,000
如果 test(a) 是 False 我们改变 b 的值

40
00:02:23,000 --> 00:02:26,000
但我们没有做任何与它相关的事 我们只传回 a

41
00:02:26,000 --> 00:02:29,000
这个结果与我们原始的函数 proc 是相同的
