1
00:00:00,150 --> 00:00:04,225
让我们尝试写一个算法 将我们解答它的过程系统化

2
00:00:04,225 --> 00:00:07,726
我们将以伪码的方式实现它 这意味着我们不必担心

3
00:00:07,726 --> 00:00:11,656
Python 的实现细节 我们正在尝试得到思路

4
00:00:11,656 --> 00:00:15,083
看它是否行得通 那么让我们再次以人类的方式思考如何解决

5
00:00:15,083 --> 00:00:18,872
这个问题 我们是这样开始的 我们的开始日期是 1/24

6
00:00:18,872 --> 00:00:23,042
之后我们计数一月剩余的天数 我们通过

7
00:00:23,042 --> 00:00:26,353
一天一天数得到结果 如果我们的开始日期更早一些 我们也许不必这样做

8
00:00:26,353 --> 00:00:29,938
我们可以用一月的总天数减去我们开始的那一天

9
00:00:29,938 --> 00:00:33,582
这将是我们的起点 我们将结果

10
00:00:33,582 --> 00:00:38,070
保存在 days 变量里 我们将初始化 days 变量为

11
00:00:38,070 --> 00:00:42,604
开始月份的总天数减去开始的那一天 那么

12
00:00:42,604 --> 00:00:49,004
在这个例子中是 31 一月的总天数 减去 24

13
00:00:49,004 --> 00:00:53,860
结果是 7 一旦我们做完这个 当前 month1 就没用了 我们应该

14
00:00:53,860 --> 00:00:57,808
给 month1 加１所以现在我们在二月份了

15
00:00:57,808 --> 00:01:00,974
现在我们将经历几个月 直到到我们所在的月份

16
00:01:00,974 --> 00:01:04,628
我们经过每个月份 直到到我们正在寻找的月份 7月

17
00:01:04,628 --> 00:01:08,380
这类似于一个 while 循环 我们正在一遍又一遍地做一些事情

18
00:01:08,380 --> 00:01:11,376
直到我们满足终止条件 我们可以用伪码的形式

19
00:01:11,376 --> 00:01:17,428
写出来 我们将会持续循环 当当前月份小于

20
00:01:17,428 --> 00:01:21,774
目标月份 我们将会加上当前月份的总天数

21
00:01:21,774 --> 00:01:25,369
并且将会把当前月份加 1 到这里 我们还没有做完

22
00:01:25,369 --> 00:01:29,310
我们仍需要我们结束日期那个月份的天数 然后这里我们

23
00:01:29,310 --> 00:01:32,752
只需要加上这一天 所以如果结束日期是 7/1 我们需要加 1

24
00:01:32,752 --> 00:01:37,437
实际上我们没深入到 7月 现在 我们将加上 29 因为 29号

25
00:01:37,437 --> 00:01:41,302
才是我们的目标日 我们还没有对年份进行计数 对这个例子来说是可以的

26
00:01:41,302 --> 00:01:44,902
但是对其他例子来说的话 我们需要算年份

27
00:01:44,902 --> 00:01:48,548
那么让我们考虑一下如何做 我们可以像算月份那样算年份

28
00:01:48,548 --> 00:01:52,548
那么 我们没在同一年 我们将加上

29
00:01:52,548 --> 00:01:53,713
该年份的天数
