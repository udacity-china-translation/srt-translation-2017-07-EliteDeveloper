1
00:00:00,190 --> 00:00:02,300
这次测验的问题如下 给定被定义好的变量

2
00:00:02,300 --> 00:00:05,490
你会在网页浏览器的代码中看到已经定义好的变量 

3
00:00:05,490 --> 00:00:07,970
你的任务是

4
00:00:07,970 --> 00:00:11,890
编写 Python 代码 

5
00:00:11,890 --> 00:00:16,000
运行之后能够输出光在一个处理器周期内的传播距离 以米为单位 

6
00:00:16,000 --> 00:00:19,085
将第一个变量设置为 speed_of_light 

7
00:00:19,085 --> 00:00:21,860
并且将光在一秒内传播的距离赋值给变量 speed_of_light 

8
00:00:21,860 --> 00:00:25,270
这个数值可能会很难记住 

9
00:00:25,270 --> 00:00:28,050
因此我们在这里加一个批注 到目前为止 我们没有使用过批注 

10
00:00:28,050 --> 00:00:31,420
但是它对于程序来说是非常重要的 

11
00:00:31,420 --> 00:00:34,925
写批注时先以 # 号开始 

12
00:00:34,925 --> 00:00:38,320
在大部分键盘上这个符号可以通过 Shift+3 快捷键来实现 

13
00:00:38,320 --> 00:00:41,190
从 # 号之后开始直到这一行结束前的内容都是批注 

14
00:00:41,190 --> 00:00:44,310
也就是说 Python 解释器会忽略这些内容 但是对于程序员来说能够看见这些批注是很有用的 

15
00:00:44,310 --> 00:00:46,990
因此我们要在这里写一个批注 内容是米/每秒 

16
00:00:46,990 --> 00:00:50,970
我们可以在批注里写任何内容 

17
00:00:50,970 --> 00:00:54,290
这些批注不会被 Python 解释器解读 

18
00:00:54,290 --> 00:00:57,230
但是设置批注是一个很好的方法 它可以帮助我们回想起做过什么 

19
00:00:57,230 --> 00:00:58,880
当我们几个月之后再返回来看这些代码时 

20
00:00:58,880 --> 00:01:02,220
可以帮助我们理解代码 

21
00:01:02,220 --> 00:01:04,790
如果有其他人阅读代码 批注也是一个好办法 

22
00:01:04,790 --> 00:01:06,478
它可以帮助他们理解代码 

23
00:01:06,478 --> 00:01:09,678
第二个变量 我们称其为 cycles_per_second 

24
00:01:09,678 --> 00:01:13,025
将2700000000赋值给该变量 

25
00:01:13,025 --> 00:01:16,157
在后边加一个小数点 这样当 Python 进行除法运算的时候 

26
00:01:16,157 --> 00:01:18,910
我们能得到准确的结果 在这个变量后面也加一个批注

27
00:01:18,910 --> 00:01:23,266
用来指出这个数字 

28
00:01:23,266 --> 00:01:27,140
是我电脑处理器中的 2.7GHz 速度

29
00:01:27,140 --> 00:01:30,610
现在 我们对这两个变量进行定义 

30
00:01:30,610 --> 00:01:32,630
你的任务是编写 Python 代码 

31
00:01:32,630 --> 00:01:35,620
使之运行后 能够输出光在一个处理器周期内传播的距离  

32
00:01:35,620 --> 00:01:38,400
以米为单位

33
00:01:38,400 --> 00:01:41,300
我们可以通过将光速除以每秒循环周期数来进行计算 
