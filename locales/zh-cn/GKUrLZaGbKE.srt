1
00:00:00,000 --> 00:00:02,000
这就是 append 的作用

2
00:00:02,000 --> 00:00:05,000
我们现在再介绍两种列表操作

3
00:00:05,000 --> 00:00:07,000
首先是plus (合并)

4
00:00:07,000 --> 00:00:11,000
plus (合并) 和字符串操作中的连接相似

5
00:00:11,000 --> 00:00:16,000
如果已有包含0 1的列表 和包含2 3的列表

6
00:00:16,000 --> 00:00:22,000
使用 plus 方法 得到的列表包含0 1 2 3

7
00:00:22,000 --> 00:00:27,000
和字符串连接相似的是 plus 方法建立新列表

8
00:00:27,000 --> 00:00:30,000
而不会修改原有的列表

9
00:00:30,000 --> 00:00:35,000
另外一个操作是 len 方法

10
00:00:35,000 --> 00:00:37,000
len 是长度 length 的缩写

11
00:00:37,000 --> 00:00:39,000
len 的使用和调用过程相似

12
00:00:39,000 --> 00:00:44,000
我们将对象传入 len 得到其长度 传入的对象可以是列表

13
00:00:44,000 --> 00:00:47,000
len 对于列表以外的其他类型的数据也有效

14
00:00:47,000 --> 00:00:49,000
也可以用于字符串操作

15
00:00:49,000 --> 00:00:51,000
len 可以运用于任何有一系列的数据的对象上

16
00:00:51,000 --> 00:00:55,000
输出的结果是输入的元素的个数

17
00:00:55,000 --> 00:01:01,000
举例来说 对列表0 1进行 len 运算 得到结果是2

18
00:01:01,000 --> 00:01:04,000
因为该列表包含2个元素

19
00:01:04,000 --> 00:01:08,000
对这个列表进行 len 运算得到结果也是2

20
00:01:08,000 --> 00:01:11,000
看起来这个列表包含很多元素

21
00:01:11,000 --> 00:01:13,000
但 len 只是计算第一层的元素

22
00:01:13,000 --> 00:01:18,000
如果其中一个元素是列表 len 并不计算该嵌套列表内有多少元素

23
00:01:18,000 --> 00:01:22,000
列表里的嵌套列表只能算一个元素

24
00:01:22,000 --> 00:01:26,000
所以本次运算结果仍为2

25
00:01:26,000 --> 00:01:29,000
len 也可以用于字符串

26
00:01:29,000 --> 00:01:32,000
输出的结果是字符串中字符的个数

27
00:01:32,000 --> 00:01:38,000
举例来说 字符串 Udacity 包含7个字符 所以结果为7

28
00:01:38,000 --> 00:01:41,000
接下来 我们来测验一下大家

29
00:01:41,000 --> 00:01:43,000
对以上三种列表操作的理解

30
00:01:43,000 --> 00:01:47,000
append 操作是作用在列表上的

31
00:01:47,000 --> 00:01:52,000
它需要一个输入参数 它的作用是在列表结尾增加一个元素

32
00:01:52,000 --> 00:01:57,000
plus 操作需要两个输入参数

33
00:01:57,000 --> 00:02:03,000
它会合并两个列表成为一个新的列表

34
00:02:03,000 --> 00:02:08,000
len 操作需要一个列表作为输入参数

35
00:02:08,000 --> 00:02:11,000
它的输出是列表的元素个数

36
00:02:11,000 --> 99:59:59,000
是输入的列表元素的个数

