1
00:00:00,091 --> 00:00:02,340
我们来快速看一下 Squawker 目前的

2
00:00:02,338 --> 00:00:03,660
功能

3
00:00:03,660 --> 00:00:07,740
现在你看到的是一个空的 RecyclerView

4
00:00:07,740 --> 00:00:10,198
这里还有另外一个 Activity

5
00:00:10,198 --> 00:00:13,500
我可以从此处关注讲师和取消关注

6
00:00:13,500 --> 00:00:17,219
我将直接关注所有讲师

7
00:00:17,219 --> 00:00:17,849
很好

8
00:00:17,850 --> 00:00:19,980
我们来看看构成这个应用的代码

9
00:00:19,980 --> 00:00:22,350
这个应用内有两个包

10
00:00:22,350 --> 00:00:24,907
第一个是 following 包

11
00:00:24,907 --> 00:00:27,240
这包含你之前看到的讲师关注

12
00:00:27,239 --> 00:00:29,339
屏幕的所有代码

13
00:00:29,338 --> 00:00:32,339
在这里可以看到 FollowingPreferenceActivity

14
00:00:32,340 --> 00:00:34,480
这只是一个包含

15
00:00:34,480 --> 00:00:37,045
FollowingPreferenceFragment 的 Activity

16
00:00:37,045 --> 00:00:38,670
我们之前看到的那些切换偏好

17
00:00:38,670 --> 00:00:41,429
都在这里设置

18
00:00:41,429 --> 00:00:42,990
如果你是刚接触 PreferenceFragment

19
00:00:42,990 --> 00:00:45,990
我在注释中添加了一些链接帮助你入门

20
00:00:45,990 --> 00:00:47,850
我想讲的另一个包是

21
00:00:47,850 --> 00:00:50,710
这里的 Provider 包

22
00:00:50,710 --> 00:00:53,609
它包含 content provider 的所有代码

23
00:00:53,609 --> 00:00:55,228
查看我这里的 build.gradle 文件

24
00:00:55,228 --> 00:00:58,308
你会发现我在这里使用的是 Schematic 库

25
00:00:58,310 --> 00:01:00,570
如果转到 contract

26
00:01:00,570 --> 00:01:02,789
可以看到来自 Schematic 的所有这些

27
00:01:02,789 --> 00:01:03,600
注解

28
00:01:03,600 --> 00:01:05,849
Schematic 库能够让你快速构建

29
00:01:05,849 --> 00:01:07,859
简单的 content provider 而无需编写

30
00:01:07,858 --> 00:01:09,839
太多样板代码

31
00:01:09,840 --> 00:01:12,240
你无需修改 content provider

32
00:01:12,239 --> 00:01:14,759
因此也不需要知道如何使用 Schematic

33
00:01:14,760 --> 00:01:17,093
但是如果你感兴趣的话 我也在注释里提供了

34
00:01:17,093 --> 00:01:18,570
关于它的一些信息

35
00:01:18,569 --> 00:01:20,069
我们来聊聊 Squawker 中的数据

36
00:01:20,069 --> 00:01:22,289
大体是什么样的

37
00:01:22,290 --> 00:01:26,130
content provider 会存储 squawk 消息的本地缓存

38
00:01:26,129 --> 00:01:28,948
将它们存储在像这样的数据库中

39
00:01:28,950 --> 00:01:33,240
本地数据库将为手机上的每条 squawk

40
00:01:33,239 --> 00:01:35,368
保存 ID、作者、作者密匙、

41
00:01:35,370 --> 00:01:38,460
实际的 squawk 消息以及发送时间

42
00:01:38,459 --> 00:01:40,689
此外还有一个 squawk 的 URI

43
00:01:40,688 --> 00:01:43,279
它是一个 squawk 列表的 URI

44
00:01:43,280 --> 00:01:46,079
它保存在变量 content_URI 中

45
00:01:46,078 --> 00:01:48,119
除了 following 和 provider 包外

46
00:01:48,120 --> 00:01:51,469
这里还有一个 MainActivity 和适配器类

47
00:01:51,468 --> 00:01:55,169
这里看到的 MainActivity 是应用的主屏幕

48
00:01:55,170 --> 00:01:56,670
如果你仔细看 会发现

49
00:01:56,670 --> 00:01:58,920
这里有一个加载器 来通过 squawk 数据库

50
00:01:58,920 --> 00:02:00,780
加载 squawk 消息

51
00:02:00,780 --> 00:02:04,468
然后在 onCreate 中 我在此设置了一个 RecyclerView

52
00:02:04,468 --> 00:02:07,089
转至 SquawkAdapter

53
00:02:07,090 --> 00:02:10,050
这是该 RecyclerView 的适配器

54
00:02:10,050 --> 00:02:11,520
往下滚动 我们还有一个

55
00:02:11,520 --> 00:02:16,050
OnBindViewHolder 方法 它负责将数据从数据库中取出

56
00:02:16,050 --> 00:02:19,770
并将其显示为 RecyclerView 中的项

57
00:02:19,770 --> 00:02:22,290
如果我再次运行我的应用--

58
00:02:22,288 --> 00:02:25,348
现在 像我之前提到的 我的数据库是空的

59
00:02:25,348 --> 00:02:29,878
我的加载器无法加载任何消息 我的应用基本没什么用

60
00:02:29,878 --> 00:02:33,179
但我能做的是 在 MainActivity 中

61
00:02:33,180 --> 00:02:38,400
我实际上编写了一些代码来插入一些虚拟 squawk

62
00:02:38,400 --> 00:02:42,569
我将它粘贴在 onCreate 方法中

63
00:02:42,568 --> 00:02:46,168
现在再次运行代码 便可以看见

64
00:02:46,169 --> 00:02:49,169
squawk 是什么样的了

65
00:02:49,169 --> 00:02:50,969
我将这个虚拟代码放在注释中了

66
00:02:50,968 --> 00:02:53,878
以便你自己尝试

67
00:02:53,878 --> 00:02:55,709
另外 关于起始代码还有几个

68
00:02:55,710 --> 00:02:58,757
微妙的点我想指出来

69
00:02:58,757 --> 00:03:00,840
当我将消息从 content provider 加载

70
00:03:00,840 --> 00:03:03,870
到 UI 中时 我只加载了我关注的

71
00:03:03,870 --> 00:03:06,158
讲师的消息

72
00:03:06,158 --> 00:03:08,679
我们来看看它的原理

73
00:03:08,680 --> 00:03:10,140
首先 当你在此屏幕上

74
00:03:10,139 --> 00:03:12,629
切换你关注的讲师时 你是在

75
00:03:12,628 --> 00:03:15,508
PreferenceFragment 中更改偏好

76
00:03:15,508 --> 00:03:18,298
这意味着我每次在此轻击切换按钮时

77
00:03:18,300 --> 00:03:20,435
共享偏好的值就会改变

78
00:03:20,435 --> 00:03:22,685
这意味着每次我在此轻击切换按钮时

79
00:03:22,685 --> 00:03:25,770
共享偏好文件中的值就会改变

80
00:03:25,770 --> 00:03:29,270
特别是 我更改的偏好带有 key_

81
00:03:29,270 --> 00:03:31,620
加讲师的名字

82
00:03:31,620 --> 00:03:33,599
这个键很重要 因为它也

83
00:03:33,598 --> 00:03:36,268
匹配我在 Squawk content provider 数据库中存储

84
00:03:36,270 --> 00:03:37,650
的键

85
00:03:37,650 --> 00:03:40,289
它们在这里的 author_key 列

86
00:03:40,288 --> 00:03:43,198
所以 确定要显示的 squawk 内容的

87
00:03:43,199 --> 00:03:44,459
流程是这样的

88
00:03:44,460 --> 00:03:46,590
我查看 SharedPreferences 文件

89
00:03:46,590 --> 00:03:48,900
它通过切换 FollowingPreferenceFragment 的按钮

90
00:03:48,900 --> 00:03:50,400
来设置

91
00:03:50,400 --> 00:03:53,129
然后我在一个叫作 CreateSelectionFor

92
00:03:53,128 --> 00:03:54,929
CurrentFollowers 的方法中使用来自 SharedPreferences

93
00:03:54,930 --> 00:03:57,030
文件的值

94
00:03:57,030 --> 00:03:59,610
此方法会生成一个 SQLite 语句

95
00:03:59,610 --> 00:04:02,700
该语句只会选择我关注的讲师的行

96
00:04:02,699 --> 00:04:05,338
看看我的 content provider 这个 SELECT 语句

97
00:04:05,340 --> 00:04:07,105
会做这样的事情

98
00:04:07,105 --> 00:04:09,688
它只会选择 Cezanne 的行 因为我

99
00:04:09,688 --> 00:04:11,858
只关注了 Cezanne 和 Lyla

100
00:04:11,859 --> 00:04:13,650
该 SELECT 语句被 MainActivity 中

101
00:04:13,650 --> 00:04:15,516
的 CursorLoader 使用

102
00:04:15,515 --> 00:04:17,099
最终产生的结果是

103
00:04:17,100 --> 00:04:21,230
如果我前往我的关注屏幕并取消选中 Lyla

104
00:04:21,230 --> 00:04:23,500
则不会再看到来自 Lyla 的 squawk

105
00:04:23,500 --> 00:04:26,550
但是如果我返回关注屏幕并选中她

106
00:04:26,550 --> 00:04:28,037
则会看到来自她的 squawk

107
00:04:28,036 --> 00:04:30,120
在适配器方面我也想

108
00:04:30,120 --> 00:04:31,769
强调几点

109
00:04:31,769 --> 00:04:35,728
这里是一堆关于如何显示日期的逻辑

110
00:04:35,730 --> 00:04:37,590
这个 if 语句的逻辑总结来说

111
00:04:37,588 --> 00:04:40,649
是这样的 如果 squawk 是在前一小时发出的

112
00:04:40,649 --> 00:04:42,509
则显示分钟数

113
00:04:42,509 --> 00:04:44,819
如果 squawk 是在前一天 而非

114
00:04:44,819 --> 00:04:47,699
前一小时发出 则显示自 squawk 发出后

115
00:04:47,699 --> 00:04:48,728
的小时数

116
00:04:48,730 --> 00:04:51,030
最后 如果 squawk 是在几天前发出

117
00:04:51,028 --> 00:04:54,118
则显示天数 以及月份的三个字母

118
00:04:54,120 --> 00:04:57,040
在这个日期逻辑下 是这些代码

119
00:04:57,040 --> 00:04:59,160
它的作用是给日期字符串加一个点

120
00:04:59,160 --> 00:05:01,850
这个点纯粹是为了美观而加的

121
00:05:01,850 --> 00:05:04,754
然后在下面这里 是一个 switch-case 语句

122
00:05:04,754 --> 00:05:07,129
它的目的是显示正确的讲师

123
00:05:07,129 --> 00:05:08,290
资料照片

124
00:05:08,290 --> 00:05:11,210
对于拥有数百万不断变化的用户的社交媒体网站

125
00:05:11,209 --> 00:05:14,269
在下载消息时下载和缓存用户个人资料

126
00:05:14,269 --> 00:05:15,829
是有意义的

127
00:05:15,829 --> 00:05:19,459
毕竟 你不会想而且你可能也很难

128
00:05:19,459 --> 00:05:22,519
在上百万的图片中找到每个人的资料

129
00:05:22,519 --> 00:05:23,449
照片

130
00:05:23,449 --> 00:05:26,538
但是在我们的用例中 squawk 来自固定数量的

131
00:05:26,540 --> 00:05:28,379
超级用户

132
00:05:28,379 --> 00:05:31,519
所以我选择将他们的图片放在应用的 Drawable

133
00:05:31,519 --> 00:05:32,689
文件夹中

134
00:05:32,689 --> 00:05:35,569
好的 我已经向你提供了关于此应用的很多信息

135
00:05:35,569 --> 00:05:38,028
现在我想让你做的是下载此代码

136
00:05:38,028 --> 00:05:39,860
自己探索一下

137
00:05:39,862 --> 00:05:42,320
当你自信对应用的功能了如指掌后

138
00:05:42,319 --> 00:05:44,920
请回答下一个问题

