1
00:00:00,000 --> 00:00:02,000
这个问题有点棘手

2
00:00:02,000 --> 00:00:05,000
为了解答这个问题 我们必须要在过程之后看一看代码

3
00:00:05,000 --> 00:00:08,000
记住 我们说过过程要替换这四行代码

4
00:00:08,000 --> 00:00:11,000
在过程之后 我们要做的是打印“url”的值

5
00:00:11,000 --> 00:00:16,000
所以这意味着我们至少需要“url”作为输出

6
00:00:16,000 --> 00:00:19,000
所有的选择都包括“url” 但我们要做的不仅限于此

7
00:00:19,000 --> 00:00:21,000
我们必须还要看一看第二行代码

8
00:00:21,000 --> 00:00:25,000
这会同时用到“page”和"end_quote"

9
00:00:25,000 --> 00:00:31,000
这里“page”的值与过程之前“page”的值是一样的

10
00:00:31,000 --> 00:00:35,000
所以 我们并不需要返回“page”的值

11
00:00:35,000 --> 00:00:38,000
它不需要成为过程生成的输出 因为我们已经知道

12
00:00:38,000 --> 00:00:40,000
我们在调用过程之前就已经知道了

13
00:00:40,000 --> 00:00:44,000
该过程并不会改变“page”的值 不会将它变成输出

14
00:00:44,000 --> 00:00:48,000
所以 这个答案不合理

15
00:00:48,000 --> 00:00:50,000
我们不需要“page”

16
00:00:50,000 --> 00:00:53,000
但将"end_quote"作为输出之一是合理的

17
00:00:53,000 --> 00:00:56,000
我们想要"end_quote"作为一个输出

18
00:00:56,000 --> 00:01:00,000
来获得结尾引号的位置 以搜索余下的页面

19
00:01:00,000 --> 00:01:04,000
所以下次我们寻找下一个目标时 我们不会找到与上一次相同的目标

20
00:01:04,000 --> 00:01:07,000
我们需要这个 所以这是这个问题的最佳答案

21
00:01:07,000 --> 00:01:09,000
我们需要两个输出

22
00:01:09,000 --> 00:01:12,000
我们同时需要“URL”和"end_quote"的值

23
00:01:12,000 --> 00:01:15,000
第四种选择可能会行得通

24
00:01:15,000 --> 00:01:22,000
如果我们同时返回 "URL"以及"start_link" 的值

25
00:01:22,000 --> 00:01:26,000
那么我们就能找到方法在不得到相同代码的前提下搜索其余的页面

26
00:01:26,000 --> 00:01:27,000
但我们基本上必须重写这个代码

27
00:01:27,000 --> 00:01:30,000
我们需要找到从"start_link" 处开始的下一个引号

28
00:01:30,000 --> 00:01:33,000
我们需要为此寻找一个闭引号

29
00:01:33,000 --> 00:01:35,000
基本上 我们需要再次计算"end_quote"的值

30
00:01:35,000 --> 00:01:38,000
与返回"start_link"的值相比

31
00:01:38,000 --> 00:01:41,000
返回"end_quote"的值就有用多了

32
00:01:41,000 --> 99:59:59,000
这就是为什么第三个选择是最佳选择

