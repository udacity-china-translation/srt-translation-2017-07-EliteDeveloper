1
00:00:00,440 --> 00:00:04,680
接下来就是我们定义阶乘的方法

2
00:00:04,680 --> 00:00:09,160
我们先回到之前对阶乘的数学定义 也就是

3
00:00:09,160 --> 00:00:11,500
我们要转化成代码的对象 我们有

4
00:00:11,500 --> 00:00:13,850
一个基本情况是输入值为 0 时的定义  这时的结果应该

5
00:00:13,850 --> 00:00:17,172
是 1 然后我们还有一个递归情况 也就是  

6
00:00:17,172 --> 00:00:20,050
当输入参数的值大于 0 时我们的过程就要

7
00:00:20,050 --> 00:00:22,380
输出 n 乘以 factorial(n-1) 这个结果

8
00:00:22,380 --> 00:00:25,780
所以我们可以按照这个思路直接将数学定义

9
00:00:25,780 --> 00:00:30,670
转化成代码了 接下来就是代码部分 我们将定义

10
00:00:30,670 --> 00:00:34,840
一个过程 就像之前做过的定义一样 我们

11
00:00:34,840 --> 00:00:39,140
有一个输入参数 它是一个数字 我们把它命名为 n 现在就是有效的代码部分

12
00:00:39,140 --> 00:00:41,140
所以我们需要首先检验输入参数是否满足基本情况

13
00:00:41,140 --> 00:00:43,830
我们要用 if 来实现这个检验  然后

14
00:00:43,830 --> 00:00:47,250
我们将检验 n 的值是否等于

15
00:00:47,250 --> 00:00:50,660
0 要知道我们是用 "==" 来表示比较运算

16
00:00:50,660 --> 00:00:52,615
当输入参数等于 0 时即满足基本情况 然后我们

17
00:00:52,615 --> 00:00:57,613
定义了 n 为 0 时阶乘函数的函数值应为

18
00:00:57,613 --> 00:01:00,285
1 所以当输入参数等于 0 时 函数值为 1

19
00:01:00,285 --> 00:01:03,510
我们需要完成的代码是 return 1 当

20
00:01:03,510 --> 00:01:08,870
输入参数 n 的值不等于 0 时 我们需要用其他的函数值来匹配 n 不等于 0 时的情况

21
00:01:08,870 --> 00:01:11,160
所以我们就有了递归情况的定义部分 而

22
00:01:11,160 --> 00:01:15,120
关于这部分的定义在之前的数学定义中已经给出 在 factorial(n) 这一个函数中

23
00:01:16,300 --> 00:01:23,424
当 n 大于 0 时 函数值为 n 乘以 factorial(n-1)

24
00:01:23,424 --> 00:01:25,088
这就是我们要转化成 Python 代码的定义

25
00:01:25,088 --> 00:01:29,010
满足递归情况时我们将输出新的结果

26
00:01:29,010 --> 00:01:36,410
也就是将 n 乘以 factorial(n-1) (就是将 n-1 作为函数 factorial() 的输入参数时返回的函数值)

27
00:01:36,410 --> 00:01:38,720
在定义阶乘的过程中调用阶乘过程可能会看起来很别扭

28
00:01:38,720 --> 00:01:41,930
这倒有点像循环过程了

29
00:01:41,930 --> 00:01:44,130
但我们肯定它不具备循环性的理由是我们

30
00:01:44,130 --> 00:01:47,180
在这里有基本情况的出现 我们有一个情况 在这里

31
00:01:47,180 --> 00:01:50,600
我们的过程会停止运行 也就是说满足基本情况我们的过程就停止了

32
00:01:50,600 --> 00:01:53,260
当 n 等于 0 时  而且我们每次调用

33
00:01:53,260 --> 00:01:55,960
函数时 并没有将初始输入的值原原本本地传给形参 n

34
00:01:55,960 --> 00:01:59,370
我们输入的是 n-1 这个值 也就是说它

35
00:01:59,370 --> 00:02:02,660
的值会越来越小  最后 n 的值会变成 0  可以假设我们

36
00:02:02,660 --> 00:02:07,070
开始的时候将一些正数传入形参 n  进程运行到最后

37
00:02:07,070 --> 00:02:10,150
最终被调用的阶乘函数值会返回 1   在得到这个函数值的过程中

38
00:02:10,150 --> 00:02:12,800
我们将会乘以这些在过程运行中临时产生的函数值

39
00:02:12,800 --> 00:02:14,870
那么我们模拟过程的运行做更加深入的探讨吧

40
00:02:14,870 --> 00:02:17,870
现在我们看一个例子

41
00:02:17,870 --> 00:02:22,540
假设我们将 3 传入 factorial 过程

42
00:02:22,540 --> 00:02:25,190
也就是我们将在这里进入 factorial 过程

43
00:02:25,190 --> 00:02:28,520
而 n 的值将会

44
00:02:28,520 --> 00:02:32,230
在 factorial 过程中被解析成 3 我们将

45
00:02:33,380 --> 00:02:35,480
先做比较运算 它不等于 0 所以

46
00:02:35,480 --> 00:02:38,860
我们不返回 1 所以我们进入 else 部分

47
00:02:38,860 --> 00:02:41,270
也就是说我们的过程返回的值将是

48
00:02:41,270 --> 00:02:45,250
n 乘以 factorial(n-1)  也就是说我们将计算出 n 的值

49
00:02:45,250 --> 00:02:48,670
并且将 n 乘以 factorial(n-1) 的函数值

50
00:02:48,670 --> 00:02:52,010
好了  n的值是 3  所以 n-1 就是 2

51
00:02:52,010 --> 00:02:54,380
这就是第一次调用时阶乘过程所做的实际操作

52
00:02:55,810 --> 00:02:58,296
但我们的过程还没真正结束 我们仍然需要继续求值的过程

53
00:02:58,296 --> 00:03:01,980
所以现在我们要求出 factorial(2) 的函数值 也就是说我们

54
00:03:01,980 --> 00:03:05,060
又再次进入到阶乘过程中 这次形参 n 的值将是

55
00:03:05,060 --> 00:03:07,515
2 我们做比较运算

56
00:03:07,515 --> 00:03:09,990
n 不等于 0  所以我们进入 else 后的子句

57
00:03:09,990 --> 00:03:13,542
现在我们的阶乘过程将返回 n 乘以

58
00:03:13,542 --> 00:03:15,840
factorial(n-1) 这一次形参 n 的值

59
00:03:15,840 --> 00:03:18,920
是 2 所以过程 factorial(2) 的值将是

60
00:03:18,920 --> 00:03:23,860
2 乘以我们调用的 factorial() 过程的函数值

61
00:03:23,860 --> 00:03:27,510
也就是将 n-1 传入 factorial 过程后返回的函数值  所以我们调用

62
00:03:27,510 --> 00:03:30,150
factorial() 过程 并且传入实参 1  要知道我们还有一个返回部分

63
00:03:30,150 --> 00:03:33,190
也就是 3 乘以 factorial(2) 这部分 所以

64
00:03:33,190 --> 00:03:35,900
我们还需要加上 "3 乘以" 这部分内容 但是现在我们得到了

65
00:03:35,900 --> 00:03:38,910
factorial(2) 的函数值 也就是 2 乘以某一个值 我们

66
00:03:38,910 --> 00:03:41,470
再次调用 factorial()过程 但是我们仍然不知道 factorial(1) 的值

67
00:03:41,470 --> 00:03:45,320
也就说我们还要进入 factorial() 过程 我们

68
00:03:45,320 --> 00:03:48,980
在这里才结束整个阶乘过程 我们进行过程调用 我们将重新进入阶乘过程

69
00:03:48,980 --> 00:03:54,850
但这次形参 n 的值是 1 现在

70
00:03:54,850 --> 00:04:00,050
n 是否等于 0 的判断结果是逻辑假 所以我们将执行 else 子句  而且现在我们讲返回 n

71
00:04:00,050 --> 00:04:06,690
也就是 1 乘以 factorial(0) 的函数值 所以现在我们调用 factorial(0) 过程

72
00:04:06,690 --> 00:04:13,320
我们回到这个过程的开头 现在形参 n 的值是 0 而且

73
00:04:14,530 --> 00:04:17,990
现在 n 是否等于 0 的判断结果是逻辑真  n 是等于 0 的

74
00:04:17,990 --> 00:04:21,390
所以我们来到这个返回部分 我们返回的值是 1

75
00:04:21,390 --> 00:04:23,970
也就是说 factorial(0) 的函数值是 1

76
00:04:23,970 --> 00:04:27,700
所以我们得到了 factorial(1) 的函数值 我们有了

77
00:04:27,700 --> 00:04:30,650
1 乘以 factorial(0) 的值 也就是 1 乘以 1  结果也就是

78
00:04:30,650 --> 00:04:33,670
1 现在我们又得到了

79
00:04:33,670 --> 00:04:36,230
1乘以 factorial(2) 的结果 我们得到 2 乘以 factorial(1) 我们已经知道

80
00:04:36,230 --> 00:04:39,678
factorial(1) 的值是 1 所以这里的值是

81
00:04:39,678 --> 00:04:42,746
2 然后就得到了 factorial(3) 的值

82
00:04:42,746 --> 00:04:45,903
我们有 3 乘以 factorial(2) 我们知道

83
00:04:45,903 --> 00:04:48,937
factorial(2) 的函数值是 2 所以我们得到结果是 6

84
00:04:48,937 --> 00:04:51,732
而且我们要注意的是我们定义的方式  那如果我们尝试

85
00:04:51,732 --> 00:04:55,242
计算 factorial(4) 的函数值 即我们从 factorial(4) 开始计算

86
00:04:55,242 --> 00:04:58,232
这个阶乘过程一开始又将怎样进行下去

87
00:04:58,232 --> 00:05:01,300
我们会得到 4 乘以 factorial(3)  所以 factorial(4) 的值会是

88
00:05:01,300 --> 00:05:04,910
4 乘以 factorial(3)  我们已经知道 factorial(3) 的值是 6

89
00:05:04,910 --> 00:05:11,063
而我们将 4 乘以 6 就得到 24  这就是 factorial(4) 的结果

