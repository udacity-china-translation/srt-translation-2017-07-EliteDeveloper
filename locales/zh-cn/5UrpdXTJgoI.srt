1
00:00:00,000 --> 00:00:02,000
这是定义 sum_list 的一种方法  

2
00:00:02,000 --> 00:00:05,000
这个方法需要有一个输入参数

3
00:00:05,000 --> 00:00:08,000
我们将把这个输入命名为 p 作为我们参数的名字 

4
00:00:08,000 --> 00:00:12,000
我倾向于使用 p 来作列表的名字 这不是硬性规定 

5
00:00:12,000 --> 00:00:16,000
我之所以不用字母 l 是因为 l 看起来很像数字1 

6
00:00:16,000 --> 00:00:22,000
之所以不用 m n 或 o 是因为 m 和 n 往往被用来代表数字 

7
00:00:22,000 --> 00:00:24,000
而 o 看起来很像数字0 

8
00:00:24,000 --> 00:00:28,000
这样 字母 l 之后第一个合适的字母就是 p 

9
00:00:28,000 --> 00:00:31,000
当然 你可以使用任何名字给你的参数命名 

10
00:00:31,000 --> 00:00:37,000
为定义 sum_list 我们将引入一个变量来追踪目前的和 

11
00:00:37,000 --> 00:00:39,000
我们把这称为 result (结果) 

12
00:00:39,000 --> 00:00:42,000
最初 result 的值为0 

13
00:00:42,000 --> 00:00:45,000
接下来 我们将使用一个 for 循环来遍历各元素 

14
00:00:45,000 --> 00:00:47,000
我们将遍历 p 中的各元素 

15
00:00:47,000 --> 00:00:50,000
每次我们执行 for 循环中的程序块 

16
00:00:50,000 --> 00:00:52,000
e 的值将是 p 的当前元素 

17
00:00:52,000 --> 00:00:56,000
我们将在这个循环中依次使用 p 中每一个元素 

18
00:00:56,000 --> 00:01:00,000
我们要把这个值与结果相加 

19
00:01:00,000 --> 00:01:03,000
当我们完成了 for 循环 这意味着我们遍历了每个元素 

20
00:01:03,000 --> 00:01:06,000
那么我们应当返回 result 

21
00:01:06,000 --> 00:01:09,000
我们在 Python 解释器中试一试 

22
00:01:09,000 --> 00:01:11,000
我们已经定义了 sum_list 

23
00:01:11,000 --> 00:01:13,000
现在尝试运行它 

24
00:01:13,000 --> 00:01:16,000
我们得到的值果然是12 

25
00:01:16,000 --> 00:01:19,000
如果我们这样运行 sum_list 传入一个空的列表 

26
00:01:19,000 --> 00:01:23,000
会出现什么情况？

27
00:01:23,000 --> 00:01:25,000
答案是 得到的值为0 

28
00:01:25,000 --> 00:01:28,000
正是我们预料的结果 对吧 

29
00:01:28,000 --> 00:01:30,000
当没有元素时 和便为0 

30
00:01:30,000 --> 00:01:33,000
我们看看代码 情况完全一致 

31
00:01:33,000 --> 00:01:36,000
最初 我们设定结果为0 

32
00:01:36,000 --> 00:01:38,000
for 循环遍历 p 中所有元素 

33
00:01:38,000 --> 00:01:41,000
但如果 p 中无元素 那么循环便不会执行 

34
00:01:41,000 --> 99:59:59,000
所以 我们去到下一个语句 即返回 result result 的值为0 

