1
00:00:00,255 --> 00:00:01,629
在剩余的设置

2
00:00:01,629 --> 00:00:04,589
完成后 我们来看看如何实际写出包含

3
00:00:04,589 --> 00:00:06,919
IdlingResource 的测试

4
00:00:06,919 --> 00:00:11,550
首先 导航至 ChangeTextBehaviorTest 文件

5
00:00:11,550 --> 00:00:13,490
你可以在这里看到 此测试的开头

6
00:00:13,490 --> 00:00:16,949
已经设置好了 跟我们之前看到的很多测试类似

7
00:00:16,949 --> 00:00:21,059
注意 它运行的是 AndroidJUnit4 类

8
00:00:21,059 --> 00:00:24,719
并对 MainActivity 使用 Activity 测试规则 

9
00:00:24,719 --> 00:00:27,570
现在 要运行涉及 IdlingResource 的测试

10
00:00:27,570 --> 00:00:30,570
我们需要在运行测试之前注册

11
00:00:30,570 --> 00:00:32,079
IdlingResource

12
00:00:32,079 --> 00:00:36,449
要这样做 我们将使用 @Before 注解

13
00:00:36,450 --> 00:00:39,000
这个注解会调出需要在测试运行之前

14
00:00:39,000 --> 00:00:41,549
执行的一个代码块

15
00:00:41,549 --> 00:00:43,919
另外补充一点 我们感兴趣

16
00:00:43,920 --> 00:00:45,429
的 Activity

17
00:00:45,429 --> 00:00:46,979
即我们的 MainActivity

18
00:00:46,979 --> 00:00:50,500
在 MainActivity 的 onCreate 方法中创建

19
00:00:50,500 --> 00:00:54,070
可以看到 MainActivity 在这里

20
00:00:54,070 --> 00:00:58,170
这是 OnCreate 方法 而 MainActivity 的创建

21
00:00:58,170 --> 00:01:02,910
发生在这个 @Before 代码块中的操作之前

22
00:01:02,909 --> 00:01:05,310
重申一遍 这个 @Before 代码块中的

23
00:01:05,310 --> 00:01:11,189
操作发生在 MainActivity 创建之后

24
00:01:11,189 --> 00:01:13,319
现在 由于这个原因 我们需要确保

25
00:01:13,319 --> 00:01:15,750
在异步任务之前

26
00:01:15,750 --> 00:01:18,629
注册 IdlingResource 

27
00:01:18,629 --> 00:01:21,149
在我们的例子中 异步任务

28
00:01:21,150 --> 00:01:25,010
是指调用 processMessage 方法

29
00:01:25,010 --> 00:01:29,000
可以看到 这里的流程是正确的

30
00:01:29,000 --> 00:01:31,390
OnCreate 创建了 MainActivity

31
00:01:31,390 --> 00:01:32,920
IdlingResource 在 @Before 代码块

32
00:01:32,920 --> 00:01:34,810
进行了注册

33
00:01:34,810 --> 00:01:37,930
最后 在 OnClick 中调用

34
00:01:37,930 --> 00:01:39,760
了 processMessage

35
00:01:39,760 --> 00:01:41,770
现在 回到测试文件

36
00:01:41,769 --> 00:01:44,109
那么实际的测试是在这里设置的

37
00:01:44,109 --> 00:01:45,959
在 @Test 注解之后

38
00:01:45,959 --> 00:01:49,179
现在我们来看看测试的内容

39
00:01:49,180 --> 00:01:52,090
这里我们检查用户

40
00:01:52,090 --> 00:01:56,150
使用键盘的输入 一个特定的字符串 然后点击“更改文本”按钮

41
00:01:56,150 --> 00:01:59,020
“编辑文本”字段的确发生了变化

42
00:01:59,019 --> 00:02:00,649
而 Espresso 可以帮助我们正确

43
00:02:00,650 --> 00:02:04,660
检查所有这些情况 即使应用非空闲

44
00:02:04,659 --> 00:02:07,959
并且在点击“更改文本”后会出现延迟

45
00:02:07,959 --> 00:02:09,650
那么这就是应用中的样子

46
00:02:09,650 --> 00:02:10,608
我们来运行测试

47
00:02:13,500 --> 00:02:15,129
注意到延迟了吧？

48
00:02:15,129 --> 00:02:18,319
文本视图填充了输出的单词

49
00:02:18,319 --> 00:02:22,250
现在 在测试后 我们需要在 @After 注释中

50
00:02:22,250 --> 00:02:24,909
取消注册 IdlingResource

51
00:02:24,909 --> 00:02:28,069
这样做的目的是确保将来如果需要

52
00:02:28,069 --> 00:02:30,259
在其他地方使用 IdlingResource 就不会

53
00:02:30,259 --> 00:02:32,099
造成任何问题

54
00:02:32,099 --> 00:02:34,159
最后 要让所有这些正常运作

55
00:02:34,159 --> 00:02:37,159
我们不能忘了添加 gradle 依赖

56
00:02:37,159 --> 00:02:40,099
那么 在 build.gradle 中 我们添加 espresso-idling

57
00:02:40,099 --> 00:02:43,489
-resource 依赖 作为编译依赖关系

58
00:02:43,490 --> 00:02:46,159
所以可以看到 实施 IdlingResource 测试

59
00:02:46,159 --> 00:02:48,479
是比较简单易懂的

60
00:02:48,479 --> 00:02:51,769
总结来说 我们在运行测试前

61
00:02:51,770 --> 00:02:56,000
注册 IdlingResource 然后执行测试

62
00:02:56,000 --> 00:02:59,810
运行测试后再取消注册 IdlingResource

63
00:02:59,810 --> 00:03:03,849
同时 记得添加编译依赖

