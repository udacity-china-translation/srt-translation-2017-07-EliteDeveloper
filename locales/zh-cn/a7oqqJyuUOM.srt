1
00:00:00,180 --> 00:00:02,810
再看看我们的图表发生了什么变化

2
00:00:02,810 --> 00:00:06,280
在旧版中 我们只有一个函数对象

3
00:00:06,280 --> 00:00:09,280
因为它是在函数 carlike 之外被定义的

4
00:00:09,280 --> 00:00:12,040
现在由于我们将方法 move 的源代码

5
00:00:12,040 --> 00:00:15,340
移入了函数 carlike 之中

6
00:00:15,340 --> 00:00:19,520
每次运行函数 carlike 时 就会生成一个新的函数

7
00:00:19,520 --> 00:00:23,180
这就是为了将所有代码都放在函数 carlike 中同一缩进层级

8
00:00:23,180 --> 00:00:27,290
需要付出的高昂代价

9
00:00:27,290 --> 00:00:30,840
人们常常困惑

10
00:00:30,840 --> 00:00:35,570
为什么将函数定义都移入函数体之后

11
00:00:35,570 --> 00:00:40,190
会导致每个车辆都拥有多个 move 方法 多个不同的函数对象

12
00:00:40,190 --> 00:00:42,600
我们打开一个新文件来研究一下

13
00:00:42,600 --> 00:00:47,030
这个简单的建造函数创建并返回一个全新的对象

14
00:00:47,030 --> 00:00:49,450
在两次调用 makeAnObject

15
00:00:49,450 --> 00:00:53,870
并将每个结果存储到一个变量中之后

16
00:00:53,870 --> 00:00:58,140
你认为存储在这两个变量中的两个对象会完全一样

17
00:00:58,140 --> 00:01:02,020
还是由于属性相似而导致两个对象看起来相似？

18
00:01:02,020 --> 00:01:05,830
换个方式问就是

19
00:01:05,830 --> 00:01:07,660
它们能通过严格相等对比吗？
