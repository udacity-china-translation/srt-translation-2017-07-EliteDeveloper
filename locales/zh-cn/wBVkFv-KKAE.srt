1
00:00:00,000 --> 00:00:03,570
现在我们在 sublime 中创建一个文件

2
00:00:03,570 --> 00:00:04,100
写入我们这个游戏的代码

3
00:00:04,100 --> 00:00:06,990
保存为 run.js

4
00:00:06,990 --> 00:00:08,550
也许这个游戏也可以叫 run

5
00:00:08,550 --> 00:00:10,460
从哪里开始呢？

6
00:00:10,460 --> 00:00:12,110
我们先写一些车辆吧

7
00:00:12,110 --> 00:00:15,830
可以用存储在变量中的值来表示

8
00:00:15,830 --> 00:00:19,600
所以如果我们的第一个敌人名为 amy

9
00:00:19,600 --> 00:00:23,170
我们就为她的车创建一个同名的变量

10
00:00:23,170 --> 00:00:26,980
在这个变量中 我们将存储一个对象来表示 amy 的车

11
00:00:26,980 --> 00:00:30,810
当你添加程序代码时

12
00:00:30,810 --> 00:00:33,980
你知道在程序运行时会有另一个内存模型被建立起来

13
00:00:33,980 --> 00:00:37,400
因此我将在这里创建一个图表

14
00:00:37,400 --> 00:00:41,280
来表示我写的这些代码建立的内存模型

15
00:00:41,280 --> 00:00:45,380
在图表中有一个盒子 代表一个全局变量

16
00:00:45,380 --> 00:00:48,390
并指向某个内存中的值

17
00:00:48,390 --> 00:00:53,170
这两个盒子完全不同

18
00:00:53,170 --> 00:00:58,700
它们一个代表某个变量 另一个代表某个内存中的对象

19
00:00:58,700 --> 00:01:00,793
变量可以指向对象


20
00:01:00,793 --> 00:01:03,778
因此这个箭头可以从这个变量延伸至这个对象

21
00:01:03,778 --> 00:01:06,981
为了记录 amy 的车在路上的位置

22
00:01:06,981 --> 00:01:09,850
这个对象应该包含一个位置属性

23
00:01:09,850 --> 00:01:13,940
这个属性将指向某个反映她所处位置的数字

24
00:01:13,940 --> 00:01:18,370
如同 JavaScript 中的其它所有值一样 这个数字也是一个对象

25
00:01:18,370 --> 00:01:21,430
存储于变量 amy 中的对象 amy

26
00:01:21,430 --> 00:01:26,700
拥有一个指向另一个对象的属性 .loc

27
00:01:26,700 --> 00:01:29,810
这个对象本身代表数字1

28
00:01:29,810 --> 00:01:35,248
在程序中的某处可能会将车辆在路上移动

29
00:01:35,248 --> 00:01:39,028
尽管在真正的游戏中 代码会比这个复杂得多

30
00:01:39,028 --> 00:01:43,000
在这里为了保持示例简洁 我们只用一行代码来表示

31
00:01:43,000 --> 00:01:46,701
由于游戏中有多个敌人

32
00:01:46,701 --> 00:01:50,406
在后面你可能需要创建第二个对象

33
00:01:50,406 --> 00:01:53,578
然后你会发现其中的很多代码都与第一个对象中的代码

34
00:01:53,578 --> 00:01:54,733
相同

35
00:01:54,733 --> 00:01:55,532
当然

36
00:01:55,532 --> 00:01:59,540
这段 run.js 中的示例代码是极度简化的

37
00:01:59,540 --> 00:02:03,300
但是足够为我们展示

38
00:02:03,300 --> 00:02:05,430
改进它的技巧

39
00:02:05,430 --> 00:02:07,460
因此我们需要问自己这个问题

40
00:02:07,460 --> 00:02:10,440
这段代码中的哪些部分

41
00:02:10,440 --> 00:02:14,350
适合被移入可重用代码区域中？

42
00:02:14,350 --> 00:02:16,010
花点时间看看这段代码

43
00:02:16,010 --> 00:02:18,720
你认为哪些部分可以被提取出来？

44
00:02:18,720 --> 00:02:20,140
我注意到了两个部分

45
00:02:20,140 --> 00:02:23,950
第一个是我们在重复创建非常相似的对象

46
00:02:23,950 --> 00:02:28,040
第二个是我们在增加这些对象的位置属性的数值

47
00:02:28,040 --> 00:02:30,000
我将专注于第二点

48
00:02:30,000 --> 00:02:33,120
我们来看看如何使用函数

49
00:02:33,120 --> 00:02:36,090
去除这段增加位置属性数值的重复代码
