1
00:00:00,041 --> 00:00:01,790
现在你已经有了构建

2
00:00:01,790 --> 00:00:03,620
一些应用的经验 是时候

3
00:00:03,620 --> 00:00:06,019
讲讲测试了

4
00:00:06,019 --> 00:00:08,309
喔 不要跑这么快

5
00:00:08,310 --> 00:00:11,450
测试并不像它的名称那么可怕

6
00:00:11,449 --> 00:00:14,000
到目前为止 对于你开发的

7
00:00:14,000 --> 00:00:16,370
任何应用 都有一部分流程

8
00:00:16,370 --> 00:00:18,650
是检查你实现的功能按你的期望

9
00:00:18,649 --> 00:00:20,039
发挥作用

10
00:00:20,039 --> 00:00:22,759
这有时很简单 只是点击屏幕上的按钮

11
00:00:22,760 --> 00:00:25,380
并验证期望的图像会不会出现

12
00:00:25,379 --> 00:00:26,629
你猜怎么着？

13
00:00:26,629 --> 00:00:29,910
实际上你一直在做某种形式的测试

14
00:00:29,910 --> 00:00:32,420
最明显的测试类型

15
00:00:32,420 --> 00:00:37,109
是用户界面测试 简称 UI 测试

16
00:00:37,109 --> 00:00:39,619
这是指测试屏幕上用户可与之交互

17
00:00:39,619 --> 00:00:41,780
的组件

18
00:00:41,780 --> 00:00:45,170
Android Studio 提供一款强大的工具 叫做 Espresso

19
00:00:45,170 --> 00:00:48,230
它可以帮助开发人员高效地对构建的应用

20
00:00:48,229 --> 00:00:49,759
进行 UI 测试

21
00:00:49,759 --> 00:00:51,530
Espresso 是一个测试框架

22
00:00:51,530 --> 00:00:54,679
包括一套 API 用于模拟和计划

23
00:00:54,679 --> 00:00:58,060
用户交互 以帮助我们作为开发人员测试应用的用户

24
00:00:58,060 --> 00:00:59,320
界面

25
00:00:59,320 --> 00:01:02,390
简单来说 开发人员无需

26
00:01:02,390 --> 00:01:04,579
各处试探应用 来找出什么有用

27
00:01:04,579 --> 00:01:07,370
什么没用 因为 Espresso 为我们提供了自动化

28
00:01:07,370 --> 00:01:09,079
此流程的工具

29
00:01:09,079 --> 00:01:10,819
我们使用的大部分应用都有很多

30
00:01:10,819 --> 00:01:13,279
用户界面组件

31
00:01:13,280 --> 00:01:15,140
假设有一个应用可以让我们

32
00:01:15,140 --> 00:01:18,109
订购美味的咖啡因饮料

33
00:01:18,109 --> 00:01:19,280
不 不是浓咖啡

34
00:01:19,280 --> 00:01:20,599
这太明显了

35
00:01:20,599 --> 00:01:22,399
假如说茶

36
00:01:22,400 --> 00:01:24,410
这个应用叫作 TeaTime 用户

37
00:01:24,409 --> 00:01:28,140
可以用它从菜单中选择特定类型的茶

38
00:01:28,140 --> 00:01:31,939
然后他们可以定制茶味 例如加牛奶 加糖

39
00:01:31,939 --> 00:01:34,849
甚至是选择杯子大小 全部使用微调控制项

40
00:01:34,849 --> 00:01:37,399
之后 用户会收到一个订单摘要

41
00:01:37,400 --> 00:01:39,320
包含他们茶饮订单的详情

42
00:01:39,319 --> 00:01:41,239
他们可以选择点击一个按钮

43
00:01:41,239 --> 00:01:43,197
向朋友发送电子邮件 以使对方知道他

44
00:01:43,197 --> 00:01:44,699
在使用此应用

45
00:01:44,700 --> 00:01:46,576
现在 所有这些接触点都需要

46
00:01:46,576 --> 00:01:49,159
进行验证 以确保用户获得无缝的

47
00:01:49,159 --> 00:01:52,560
体验 且应用按预期的方式运行

48
00:01:52,560 --> 00:01:55,040
那么 与其找专人点击

49
00:01:55,040 --> 00:01:57,710
所有这些按钮 检测可能几百种茶饮

50
00:01:57,709 --> 00:02:00,649
组合 Espresso 可以使开发人员

51
00:02:00,650 --> 00:02:02,359
自动化主要流程

52
00:02:02,359 --> 00:02:04,159
以大规模和更高效地

53
00:02:04,159 --> 00:02:06,450
进行测试

54
00:02:06,450 --> 00:02:08,270
我们来通过以下例子

55
00:02:08,270 --> 00:02:11,980
深入地看看 Espresso 究竟如何做到这一点

