1
00:00:00,000 --> 00:00:03,000
这个问题来自于疯狂的 Puff

2
00:00:03,000 --> 00:00:09,000
你可以举一些例子说明 Backus-Naur Form 在实际上是如何运用的吗？

3
00:00:09,000 --> 00:00:12,000
例如 作为一个正式的方法来描述语言

4
00:00:12,000 --> 00:00:19,000
在建立编译器或解释器时 BNF 好像有点用处

5
00:00:19,000 --> 00:00:24,000
或是其他任务 像是教计算机了解文章

6
00:00:24,000 --> 00:00:29,000
此外 BNF 让你从抽象的形式变为具体的形式

7
00:00:29,000 --> 00:00:34,000
但似乎在实际操作中 你经常要往相反的方向走

8
00:00:34,000 --> 00:00:39,000
例如 给一个具体的例子 一个 Python 语句

9
00:00:39,000 --> 00:00:45,000
你想知道解释器如何解析它 所以 Dave 你要如何做呢？"

10
00:00:45,000 --> 00:00:48,000
谢谢你的问题 Tracy 这是一个很大的问题 

11
00:00:48,000 --> 00:00:51,000
在这门课我们使用 BNF 来了解语言

12
00:00:51,000 --> 00:00:56,000
并看看我们如何构建 Python 中的表达式

13
00:00:56,000 --> 00:01:02,000
但是语法也为解释器所使用 将字符串分解成零件

14
00:01:02,000 --> 00:01:05,000
当你写一个 Python 程序 你在解释器中执行

15
00:01:05,000 --> 00:01:07,000
解释器必须弄清楚程序的内容

16
00:01:07,000 --> 00:01:09,000
它必须弄清楚 这是一个赋值表达式吗？

17
00:01:09,000 --> 00:01:11,000
它是一个变量吗？

18
00:01:11,000 --> 00:01:13,000
这些是数字的一部分吗？它是个字符串吗？

19
00:01:13,000 --> 00:01:17,000
我们在第一单元以及后面单元看到的所有的事情  都是 Python 中的结构

20
00:01:17,000 --> 00:01:22,000
我们需要的语法被构建在解释器中  来将字符串分解成它的零件

21
00:01:22,000 --> 00:01:25,000
这是解释器实际运作的一部分  当人们设计编译器或解释器时

22
00:01:25,000 --> 00:01:29,000
他们通常从写语法开始

23
00:01:29,000 --> 00:01:33,000
然后会有工具把语法变成一个程序

24
00:01:33,000 --> 00:01:36,000
这程序将字符串分解成它的零件

25
00:01:36,000 --> 00:01:41,000
如果你选读后续课程  如果你选读了 CS262 程序语言课程

26
00:01:41,000 --> 00:01:44,000
它谈了很多关于解释器实际上是如何做到的

27
00:01:44,000 --> 00:01:46,000
除了将程序语言分解成零件之外

28
00:01:46,000 --> 00:01:49,000
语法还有很多其他的用途

29
00:01:49,000 --> 00:01:54,000
有些有生产的效用 你从语法开始 然后产生字符串

30
00:01:54,000 --> 00:01:57,000
一个有趣的例子是猜密码

31
00:01:57,000 --> 00:02:01,000
在佛罗里达州有一个小组关注如何建立密码

32
00:02:01,000 --> 00:02:04,000
首先 你从可能有的一堆密码中学习到语法

33
00:02:04,000 --> 00:02:08,000
然后 你可以创造出更多的密码  你可以使用这个方法来猜密码

34
00:02:08,000 --> 00:02:12,000
或者如果你想要衡量密码有多好

35
00:02:12,000 --> 00:02:14,000
来估计从这个语法产生的密码有多强

36
00:02:14,000 --> 00:02:17,000
为了产生字符串 有许多有趣的语法应用

37
00:02:17,000 --> 00:02:21,000
在写程序语言时 比较普遍的应用是

38
00:02:21,000 --> 00:02:24,000
我们用语法将一个很长的字符串文字做分解

39
00:02:24,000 --> 00:02:28,000
这就是你的 Python 程序 使用语法将文字变成程序的零件