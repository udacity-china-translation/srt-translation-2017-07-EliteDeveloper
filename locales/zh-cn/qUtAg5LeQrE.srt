1
00:00:00,980 --> 00:00:02,110
我们用字符串可以做到

2
00:00:02,110 --> 00:00:04,600
但用数字做不到的事情之一是

3
00:00:04,600 --> 00:00:09,010
我们可以从字符串中提取子序列 要记住字符串是什么 是一个字符序列 

4
00:00:09,010 --> 00:00:11,380
如果我们有一个字符串 

5
00:00:11,380 --> 00:00:15,660
我们可以用方括号来提取部分字符串 

6
00:00:15,660 --> 00:00:18,050
因此如果我们有字符串 udacity

7
00:00:18,050 --> 00:00:22,395
用方括号 值为0 

8
00:00:22,395 --> 00:00:26,570
这就是我们从字符串中选择第0个位置的字符 

9
00:00:26,570 --> 00:00:28,630
字符串中的字符是从 0 开始索引的

10
00:00:28,630 --> 00:00:33,040
因此索引第0个位置字符的结果

11
00:00:33,040 --> 00:00:34,800
是只带有字母 u 的字符串

12
00:00:35,900 --> 00:00:38,070
方括号中的内容可以是任何计算结果为数字的表达式 

13
00:00:38,070 --> 00:00:44,160
这里我们可以输入 1 + 1 

14
00:00:44,160 --> 00:00:51,480
1 + 1等于2 在第2个位置对应的字符是字母 a 

15
00:00:51,480 --> 00:00:53,960
因此它的值是只包含一个字母 a 的字符串

16
00:00:53,960 --> 00:00:56,750
这看起来可能会有一点奇怪 

17
00:00:56,750 --> 00:00:59,620
而且通常我们不会使用像这样的字符串常量进行索引 

18
00:00:59,620 --> 00:01:02,680
但是这样做确实有效 

19
00:01:02,680 --> 00:01:04,989
使用变量来进行这种操作 更为普遍一些

20
00:01:04,989 --> 00:01:09,720
我们已经将变量 name 初始化为字符串 Dave 然后我们检索 name 第0个位置的字符 

21
00:01:09,720 --> 00:01:12,370
不管变量 name 是什么 我们都会得到该字符串的第一个字母 

22
00:01:12,370 --> 00:01:16,490
在这个例子中 是大写字母 D 

23
00:01:16,490 --> 00:01:21,510
我们在 Python 解释器中运行一下 

24
00:01:21,510 --> 00:01:26,325
这里 我把带值的变量 name 定义为字符串 Dave 之后 输出对 name 第0个位置进行检索的内容 

25
00:01:26,325 --> 00:01:30,920
运行之后得到了第一个字母 D 如果换一下 

26
00:01:30,920 --> 00:01:35,410
输出对 name 第3个位置进行检索的内容 运行之后我们会得到第四个字母 e 

27
00:01:36,680 --> 00:01:41,710
假设我试图输出对 name 第4个位置检索的内容 实际上在第4个位置上没有字符 

28
00:01:41,710 --> 00:01:44,490
记住索引是从第0个位置开始的 

29
00:01:44,490 --> 00:01:48,370
因此这是第0个位置 第1个位置 第2个位置 第3个位置 那么我运行之后

30
00:01:49,410 --> 00:01:51,070
结果则显示为错误 

31
00:01:51,070 --> 00:01:54,700
因为我要求输出字符串第4个位置的内容 这超出了范围 

32
00:01:54,700 --> 00:01:56,850
因此显示的错误表明对字符串的索引超出了范围

33
00:01:56,850 --> 00:02:00,860
可以使用负数作为索引

34
00:02:00,860 --> 00:02:04,360
当我利用负数进行检索时 

35
00:02:04,360 --> 00:02:06,990
它会从字符串后边开始计数 

36
00:02:06,990 --> 00:02:12,400
对 name 的第 -1 个位置进行检索 运行之后将显示字符串的最后一个字符 

37
00:02:12,400 --> 00:02:19,760
如果我对 name 的第 -2 个位置进行检索 运行之后显示倒数第二个字符 也就是 v 
