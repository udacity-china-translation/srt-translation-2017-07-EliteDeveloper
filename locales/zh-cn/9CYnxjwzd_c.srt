1
00:00:00,310 --> 00:00:03,930
现在我创建第二个文件

2
00:00:03,930 --> 00:00:07,360
将其命名为 library

3
00:00:07,360 --> 00:00:11,200
我的目标是写出一些代码

4
00:00:11,200 --> 00:00:14,880
以帮助我在稍后的过程中更轻松地写代码

5
00:00:14,880 --> 00:00:19,160
我想要写一些可以在这边使用的泛化代码

6
00:00:19,160 --> 00:00:23,500
如果我想要增加任何车辆对象的位置数值

7
00:00:23,500 --> 00:00:25,110
我都可以使用这里的代码

8
00:00:25,110 --> 00:00:28,160
这里的代码应该可广泛用于多种情况

9
00:00:28,160 --> 00:00:31,680
我首先写一个函数 然后编辑

10
00:00:31,680 --> 00:00:35,220
使其可以为我们移动一个传入的车辆

11
00:00:35,220 --> 00:00:39,330
现在我们直接为这两个车辆对象调用这个函数

12
00:00:39,330 --> 00:00:41,690
就可以实现我们之前的移动效果

13
00:00:41,690 --> 00:00:45,090
但完全不需要每次都输入增加数值的代码

14
00:00:45,090 --> 00:00:48,610
现在我们不仅拥有存储在 amy 和 ben 中的这两个车辆对象

15
00:00:48,610 --> 00:00:52,290
还有另一个变量 存储着另一个对象

16
00:00:52,290 --> 00:00:54,820
同时 这个对象正好是函数对象

17
00:00:54,820 --> 00:00:59,780
这个函数对象作用于这两个简单的车辆对象

18
00:00:59,780 --> 00:01:02,180
并修改他们的 .loc 属性

19
00:01:02,180 --> 00:01:02,890
现在

20
00:01:02,890 --> 00:01:05,920
很可能有人会怀疑我们刚才到底改进了什么

21
00:01:05,920 --> 00:01:08,650
看起来的确是代码总量反而比之前增加了

22
00:01:08,650 --> 00:01:12,600
这个辅助函数的代码量

23
00:01:12,600 --> 00:01:14,860
就跟他们取代的代码一样多

24
00:01:14,860 --> 00:01:18,350
我能想到两个重大差别

25
00:01:18,350 --> 00:01:21,670
来解释为什么像刚才那样将重复代码提取为函数是非常重要的
