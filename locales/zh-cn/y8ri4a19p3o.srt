1
00:00:01,040 --> 00:00:03,049
目前为止 我们成功让用户选择

2
00:00:03,049 --> 00:00:05,269
并存储了他们感兴趣的地点列表

3
00:00:05,269 --> 00:00:07,727
并且我们看了如何每次在设备上显示该列表时

4
00:00:07,727 --> 00:00:10,179
使此信息保持最新状态

5
00:00:10,179 --> 00:00:11,839
那么现在 下一个合乎逻辑的步骤

6
00:00:11,839 --> 00:00:13,910
是开始侦听设备的位置

7
00:00:13,910 --> 00:00:15,769
并能在我们进入其中一个地点时

8
00:00:15,769 --> 00:00:18,449
将设备调为静音

9
00:00:18,449 --> 00:00:19,989
我们还将添加一个切换按钮

10
00:00:19,989 --> 00:00:22,909
以打开和关闭 Shush Me

11
00:00:22,910 --> 00:00:25,530
一个选项是使用位置 API

12
00:00:25,530 --> 00:00:28,286
并每隔几分钟请求一次 GPS 位置

13
00:00:28,286 --> 00:00:29,660
然后将此信息

14
00:00:29,660 --> 00:00:32,329
与我们列表中的每个位置进行比较

15
00:00:32,329 --> 00:00:34,989
此方法叫做 GPS 轮询

16
00:00:34,990 --> 00:00:37,460
尽管此方法可以正常使用

17
00:00:37,460 --> 00:00:39,679
它无疑会很快耗尽电池

18
00:00:39,679 --> 00:00:42,200
而最终使很多用户不开心

19
00:00:42,200 --> 00:00:44,790
导致立即卸载应用

20
00:00:44,789 --> 00:00:47,810
但是 好的一点是此情形之所以存在

21
00:00:47,810 --> 00:00:51,080
是因为它稍后会在其他情况用到

22
00:00:51,079 --> 00:00:53,210
不过幸运的是 Android

23
00:00:53,210 --> 00:00:55,460
提供了另一个选项 它正好可以处理我们

24
00:00:55,460 --> 00:00:59,862
对 Shush Me 的需求 此选项叫作地理围栏

25
00:00:59,862 --> 00:01:03,710
地理围栏通常指围绕特定现实世界

26
00:01:03,710 --> 00:01:07,540
物理位置的虚拟周界

27
00:01:07,540 --> 00:01:10,220
在 Android 中 你可以有多个 Activity 的地理围栏

28
00:01:10,219 --> 00:01:13,429
每个设备限 100 个

29
00:01:13,430 --> 00:01:15,090
每个地理围栏都由一个

30
00:01:15,090 --> 00:01:20,299
由经度和纬度定义的中心点以及半径组成

31
00:01:20,299 --> 00:01:21,920
你可以通过注册 Google Play Services

32
00:01:21,920 --> 00:01:24,290
来开始侦听地理围栏

33
00:01:24,290 --> 00:01:26,510
我们稍后来看这么做的方法

34
00:01:26,510 --> 00:01:29,510
然后 即使你的应用不再运行了

35
00:01:29,510 --> 00:01:31,670
Android 也会跟踪设备相对于

36
00:01:31,670 --> 00:01:34,549
任何注册的地理围栏的位置

37
00:01:34,549 --> 00:01:38,009
一旦发生进入或退出地理围栏的 Activity 

38
00:01:38,010 --> 00:01:40,880
它会启动你指定的任何类型的 intent

39
00:01:40,879 --> 00:01:43,280
这可以是一项 intent 服务或 BroadcastReceiver

40
00:01:43,280 --> 00:01:46,230
我们稍后会看到

41
00:01:46,230 --> 00:01:47,870
每个地理围栏都有一个生命周期 由你

42
00:01:47,870 --> 00:01:50,329
在创建它时指定

43
00:01:50,329 --> 00:01:53,239
一旦到期 位置服务将自动

44
00:01:53,239 --> 00:01:55,459
删除该地理围栏

45
00:01:55,459 --> 00:01:58,000
你也可以随时通过明确

46
00:01:58,000 --> 00:02:00,260
从 Google Play Services 中移除地理围栏

47
00:02:00,260 --> 00:02:03,920
来取消注册你的应用注册的所有地理围栏

48
00:02:03,920 --> 00:02:05,780
地理围栏相比不间断

49
00:02:05,780 --> 00:02:10,159
轮询 GPS 信息更省电的原因是

50
00:02:10,159 --> 00:02:13,879
Android 优化了所有三种定位技术 以最大限度地

51
00:02:13,879 --> 00:02:15,740
减少电池消耗

52
00:02:15,740 --> 00:02:19,879
它会首先使用蜂窝塔和 Wi-Fi 以及

53
00:02:19,879 --> 00:02:23,210
最新的 GPS 定位来检查是否有进入

54
00:02:23,210 --> 00:02:25,580
或退出地理围栏的 Activity

55
00:02:25,580 --> 00:02:29,090
而很少强制使用轮询实时 GPS 数据

56
00:02:29,090 --> 00:02:33,110
因此 不会有不必要的电池消耗

57
00:02:33,110 --> 00:02:35,480
但是这样做时 设备可能

58
00:02:35,479 --> 00:02:39,019
需要几分钟才能意识到其进入或退出了

59
00:02:39,020 --> 00:02:40,670
地理围栏

60
00:02:40,669 --> 00:02:42,199
所以对于你使用地理围栏的

61
00:02:42,199 --> 00:02:44,599
任何用例 先检查

62
00:02:44,599 --> 00:02:47,680
是否可接受这种延迟

