1
00:00:00,594 --> 00:00:02,758
现在我们已经熟悉了库

2
00:00:02,758 --> 00:00:04,198
并知道应用的结构

3
00:00:04,200 --> 00:00:07,169
我们来看点实际的东西 那就是编码

4
00:00:07,168 --> 00:00:10,649
该应用已编译 但是缺少所有的 emojifier

5
00:00:10,650 --> 00:00:11,970
功能

6
00:00:11,970 --> 00:00:17,700
现在 应用启动相机、拍照

7
00:00:17,699 --> 00:00:19,379
并将照片加载到 ImageView 中

8
00:00:19,379 --> 00:00:22,320
然后你可以选择共享或保存图像

9
00:00:22,320 --> 00:00:24,059
缺失的步骤是处理照片

10
00:00:24,059 --> 00:00:27,509
以提取我们之前讨论的分类数据

11
00:00:27,510 --> 00:00:29,730
将该数据映射到较为匹配的表情符号

12
00:00:29,730 --> 00:00:32,368
并将表情符号位图覆盖在图像中

13
00:00:32,368 --> 00:00:33,548
检测到的人脸上

14
00:00:33,548 --> 00:00:36,878
让我们来详细看看现有的代码

15
00:00:36,880 --> 00:00:40,170
我们从 AndroidManifest.xml 文件开始

16
00:00:40,170 --> 00:00:42,329
有两点需要注意

17
00:00:42,329 --> 00:00:45,509
<uses-feature> 标签用于说明应用

18
00:00:45,509 --> 00:00:47,039
将使用相机

19
00:00:47,039 --> 00:00:49,109
required 项在设置为 true 时 如果用户的手机

20
00:00:49,109 --> 00:00:51,658
不支持相机 则将阻止用户

21
00:00:51,658 --> 00:00:54,268
下载应用

22
00:00:54,270 --> 00:00:57,359
<uses-permission> 标签告诉系统

23
00:00:57,359 --> 00:00:59,579
你需要正确的外部存储

24
00:00:59,579 --> 00:01:00,570
权限

25
00:01:00,570 --> 00:01:03,090
如果应用在 API 级别高于 23 的

26
00:01:03,090 --> 00:01:05,850
设备上运行 则需要使用运行权限模型

27
00:01:05,849 --> 00:01:08,939
请求权限 这个我们稍后再讨论

28
00:01:08,938 --> 00:01:10,828
但是无论 API 级别如何

29
00:01:10,828 --> 00:01:13,169
清单文件权限都是必须的

30
00:01:13,170 --> 00:01:17,180
此包中共有两个 Java 文件：MainActivity

31
00:01:17,180 --> 00:01:19,140
和 BitmapUtils

32
00:01:19,140 --> 00:01:21,390
在 MainActivity 中 onCreate 方法

33
00:01:21,390 --> 00:01:22,799
较为简单明了

34
00:01:22,799 --> 00:01:25,019
它会初始化视图

35
00:01:25,019 --> 00:01:28,039
转到布局文件 我们

36
00:01:28,040 --> 00:01:29,930
可以看到所有的视图最初

37
00:01:29,930 --> 00:01:34,040
都是不可见的 这个 TitleTextView 和 EmojifyMe

38
00:01:34,040 --> 00:01:35,120
Button 除外

39
00:01:35,120 --> 00:01:38,200
第一个 ImageView 没有源属性

40
00:01:38,200 --> 00:01:40,228
所以最初没有什么可见

41
00:01:40,227 --> 00:01:42,768
而其余的视图（均是浮动动作按钮）

42
00:01:42,769 --> 00:01:45,409
它们的可见性都设为了 gone

43
00:01:45,409 --> 00:01:47,659
此布局文件中需要注意的最后一点

44
00:01:47,659 --> 00:01:50,219
是 onClick 方法

45
00:01:50,218 --> 00:01:51,718
对于浮动操作按钮

46
00:01:51,718 --> 00:01:57,128
我们有 shareMe、saveMe 和 clearImage

47
00:01:57,129 --> 00:01:58,989
对于常规 emojifyMe 按钮

48
00:01:58,989 --> 00:02:02,719
我们有适当命名的 emojifyMe 方法

49
00:02:02,718 --> 00:02:06,169
回到 MainActivity 中 可以看到 emojifyMe onClick

50
00:02:06,170 --> 00:02:09,500
方法使用运行权限模型

51
00:02:09,500 --> 00:02:13,217
检查正确的外部存储权限

52
00:02:13,217 --> 00:02:14,758
如果你想更多地了解这个

53
00:02:14,758 --> 00:02:16,716
我会在讲师注释中提供关于运行时权限

54
00:02:16,717 --> 00:02:18,649
的指南

55
00:02:18,650 --> 00:02:21,890
如果未授予权限 我们则请求它

56
00:02:21,889 --> 00:02:24,618
如果授予了 我们就启动相机

57
00:02:24,620 --> 00:02:27,920
下一个方法是 onRequestPermissionResult

58
00:02:27,919 --> 00:02:30,349
它会返回权限请求的

59
00:02:30,348 --> 00:02:31,908
结果

60
00:02:31,908 --> 00:02:35,198
如果获得了权限 我们就启动相机

61
00:02:35,199 --> 00:02:39,338
如果没有 我们显示一条 Toast 消息 说权限请求被拒

62
00:02:39,340 --> 00:02:41,770
下一个是 launchCamera 方法

63
00:02:41,770 --> 00:02:44,710
我们使用 ACTION_IMAGE_CAPTURE 隐式 intent

64
00:02:44,710 --> 00:02:47,879
用本地相机应用拍照

65
00:02:47,878 --> 00:02:50,848
接下来 在检查确实有相机应用

66
00:02:50,848 --> 00:02:54,060
来处理此 intent 后 我们使用 BitmapUtils 类

67
00:02:54,060 --> 00:02:56,240
创建一个临时文件

68
00:02:56,240 --> 00:02:58,200
以使相机知道将拍摄的图像

69
00:02:58,199 --> 00:03:00,560
存储在哪里

70
00:03:00,560 --> 00:03:03,318
然后 我们使用 FileProvider 类

71
00:03:03,318 --> 00:03:07,068
获取所创建的临时文件的 URI

72
00:03:07,068 --> 00:03:10,548
然后将它作为 extra 传入隐式 Intent

73
00:03:10,550 --> 00:03:14,060
最后 我们调用 startActivityForResult

74
00:03:14,060 --> 00:03:16,818
以从相机获取结果

75
00:03:16,818 --> 00:03:20,788
即用户是否捕获了照片

76
00:03:20,788 --> 00:03:23,809
接下来 我们来到 onActivityResult 方法

77
00:03:23,810 --> 00:03:26,840
它是启动 ActivityForResult 的调用的回调

78
00:03:26,840 --> 00:03:30,140
在用户从相机应用返回后调用

79
00:03:30,139 --> 00:03:31,849
如果成功拍摄了照片

80
00:03:31,848 --> 00:03:34,429
结果代码将是 RESULT_OK

81
00:03:34,430 --> 00:03:37,099
那么我们便可以处理和设置图像

82
00:03:37,098 --> 00:03:38,718
如果没有 这意味着用户退出了

83
00:03:38,718 --> 00:03:40,218
拍照 则我们应该

84
00:03:40,218 --> 00:03:42,530
删除临时文件

85
00:03:42,530 --> 00:03:45,288
processAndSetImage 方法用于切换视图

86
00:03:45,288 --> 00:03:46,399
的可见性

87
00:03:46,400 --> 00:03:49,310
它会隐藏 Emojify 按钮和标签文本视图

88
00:03:49,310 --> 00:03:52,580
同时显示所有浮动操作按钮

89
00:03:52,580 --> 00:03:56,120
接下来 我们使用 BitmapUtils 类对照片重新采样

90
00:03:56,120 --> 00:03:58,849
这样我们便使用更少的内存

91
00:03:58,848 --> 00:04:03,328
最后 我们将生成的图像位图设置为 ImageView

92
00:04:03,330 --> 00:04:06,030
最终 此方法将包含 Emojify 我们照片

93
00:04:06,030 --> 00:04:08,218
的功能

94
00:04:08,218 --> 00:04:12,718
最后三个方法 saveMe、shareMe 和 clearImage

95
00:04:12,718 --> 00:04:15,908
是浮动操作按钮的 onClick 方法

96
00:04:15,908 --> 00:04:18,269
前两个 saveMe 和 shareMe

97
00:04:18,269 --> 00:04:21,899
使用 BitmapUtils 类来删除临时图像文件

98
00:04:21,899 --> 00:04:25,399
和在外部存储器中保存处理后的图像文件

99
00:04:25,399 --> 00:04:28,408
shareMe 还包括来自 BitmapUtils

100
00:04:28,410 --> 00:04:30,540
的 shareImage 方法 它用于

101
00:04:30,540 --> 00:04:33,480
在社交媒体网络上共享图像

102
00:04:33,480 --> 00:04:36,330
最后一个方法 clearImage 基本上只是将应用

103
00:04:36,329 --> 00:04:37,858
重置为初始状态

104
00:04:37,860 --> 00:04:39,960
它会删除 ImageView 中的图像

105
00:04:39,959 --> 00:04:42,509
使 Emojify 按钮和标签可见

106
00:04:42,509 --> 00:04:44,550
并隐藏所有浮动操作按钮

107
00:04:44,550 --> 00:04:47,800
最后 它会删除临时图片文件

108
00:04:47,800 --> 00:04:49,189
初步应用就到此结束了

109
00:04:49,189 --> 00:04:51,480
下一个注释将包含来自 BitmapUtils 类

110
00:04:51,480 --> 00:04:54,410
的方法的描述

