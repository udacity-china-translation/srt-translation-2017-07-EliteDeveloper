1
00:00:01,010 --> 00:00:02,310
我们可以对字符串进行许多操作

2
00:00:02,310 --> 00:00:04,760
接下来我要讲的是 

3
00:00:04,760 --> 00:00:08,880
从字符串中选出子字符串

4
00:00:08,880 --> 00:00:12,500
到目前为止 我们使用过索引 在这个过程中会用到字符串

5
00:00:12,500 --> 00:00:15,640
方括号、能产生一个数字的表达式 

6
00:00:15,640 --> 00:00:18,880
以及闭合方括号 

7
00:00:18,880 --> 00:00:22,760
这样我们得到一个包含一个字符的字符串

8
00:00:22,760 --> 00:00:26,160
无论这个数字在字符串中指向什么位置

9
00:00:26,160 --> 00:00:28,310
我们可以通过方括号进行的另外一个操作是从字符串中挑选子字符串 

10
00:00:28,310 --> 00:00:30,820
与方括号中只放置一个表达式不同 

11
00:00:30,820 --> 00:00:33,930
在这里 我们可以输入一个表达式 

12
00:00:33,930 --> 00:00:36,720
这个表达式计算出来也应当是一个数字 

13
00:00:36,720 --> 00:00:41,800
然后是冒号 再之后是另一个表达式 

14
00:00:41,800 --> 00:00:44,810
这两个表达式得出的值都是数字 

15
00:00:44,810 --> 00:00:49,040
这样求值之后会得出一个字符串 

16
00:00:49,040 --> 00:00:51,200
这个字符串是输入字符串的子字符串 

17
00:00:51,200 --> 00:00:54,090
我将这个字符串称之为 s 将这个数字的值称为 start 

18
00:00:54,090 --> 00:00:56,020
这个数字的值称为 stop  

19
00:00:56,020 --> 00:01:00,120
得出的结果是 s 字符串中 

20
00:01:00,120 --> 00:01:02,760
所有字符的一个子字符串

21
00:01:02,760 --> 00:01:05,570
就是刚刚我们在这提到的字符串 从 start 位置开始

22
00:01:05,570 --> 00:01:08,750
冒号左边的数字 

23
00:01:08,750 --> 00:01:13,580
在 stop 位置结束 但不包括最后一个字符 

24
00:01:13,580 --> 00:01:16,830
因此实际包括的字符是从 start 位置开始 到 stop-1 位置 

25
00:01:16,830 --> 00:01:21,270
这种结构使得我们可以从任何字符串中 

26
00:01:21,270 --> 00:01:25,920
选择一个连续字符的子字符串

27
00:01:29,400 --> 00:01:31,450
我们在 Python 解释器中举个例子 

28
00:01:31,450 --> 00:01:34,080
将变量 word 进行初始化 使它成为 assume 字符串 

29
00:01:34,080 --> 00:01:37,820
通过使用我们最初看到的单一索引运算符 

30
00:01:37,820 --> 00:01:40,660
我们可以从 word 中选择一个字符 

31
00:01:40,660 --> 00:01:43,370
如果对 word 第3个位置进行索引 

32
00:01:43,370 --> 00:01:46,520
我们会得到第4个位置相应的字符 0 1 2 3

33
00:01:46,520 --> 00:01:49,680
第4个位置的字符是 u 当我们运行之后 

34
00:01:49,680 --> 00:01:53,310
我们得到的结果是 u 如果练习新讲的操作 

35
00:01:54,400 --> 00:01:57,680
那就是我们搜索第3个位置到第4个位置之前的字符 

36
00:01:57,680 --> 00:02:01,260
选择范围是从第3个位置开始 到第4个位置之前 

37
00:02:01,260 --> 00:02:05,000
因此最终只会得到字母 u 这一个字符

38
00:02:06,200 --> 00:02:09,574
为了解释得更清楚一些 

39
00:02:09,574 --> 00:02:14,820
如果我选择的范围是 3:3 结果显示是没有字符 

40
00:02:14,820 --> 00:02:16,890
输出的结果是一个空字符串 只是我们看不到 

41
00:02:16,890 --> 00:02:19,740
在第3个位置和第3个位置之间没有字符 

42
00:02:19,740 --> 00:02:23,430
我们回到

43
00:02:23,430 --> 00:02:27,824
对字符串的第3个位置进行索引的操作 

44
00:02:27,824 --> 00:02:30,950
选择第4个位置到第6个位置之前的字符 

45
00:02:30,950 --> 00:02:34,552
我们将得到一个字符串 它是第4个位置和第5个位置的子字符串

46
00:02:34,552 --> 00:02:36,380
运行后可以看到 

47
00:02:36,380 --> 00:02:39,372
第一个输出的结果是 u 

48
00:02:39,372 --> 00:02:42,360
第2个输出的是第4个位置和第5个位置的字符 me 

49
00:02:42,360 --> 00:02:44,850
是单词的最后两个字符 

50
00:02:44,850 --> 00:02:48,550
下面展示另一个操作 就是让冒号的一侧没有任何内容 

51
00:02:48,550 --> 00:02:52,200
例如我们选择显示的范围是4： 

52
00:02:52,200 --> 00:02:55,250
得到的结果将会显示从第4个位置到末尾的字符 

53
00:02:55,250 --> 00:02:57,320
我们不需要明确地数字来确定末尾字符所在的位置 

54
00:02:57,320 --> 00:03:00,050
这个输出的结果和我们刚刚操作输出的结果一样 

55
00:03:00,050 --> 00:03:02,610
我们也可以设置冒号前面什么内容也没有 

56
00:03:02,610 --> 00:03:05,520
这就意味着从字符串开始位置进行选择 

57
00:03:05,520 --> 00:03:10,140
因此如果我们选择的范围是 :2 输出的结果将显示从第0个位置到第2个位置之前的字符  

58
00:03:10,140 --> 00:03:17,120
也就是单词的前两个字母 as 

59
00:03:17,120 --> 00:03:22,180
我们也可以将冒号两侧都设置为空白 选择 word[:] 范围之内的字符

60
00:03:22,180 --> 00:03:25,640
冒号两边什么内容也没有 说明范围从起始位置到末尾位置 

61
00:03:25,640 --> 00:03:28,790
输出的结果会是 word 的完整内容 

62
00:03:28,790 --> 00:03:31,120
其实没有什么理由这样做

63
00:03:31,120 --> 00:03:33,120
但是这与句法规则是一致的  

64
00:03:33,120 --> 00:03:35,260
我们可以设置冒号的一侧为空白 

65
00:03:35,260 --> 00:03:37,260
这意味着 从起始位置开始选择或者选择的范围到末尾位置 
