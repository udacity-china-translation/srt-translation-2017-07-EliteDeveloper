1
00:00:00,090 --> 00:00:02,969
花点时间思考一下你认为

2
00:00:02,969 --> 00:00:05,160
应该这样做的原因

3
00:00:05,160 --> 00:00:08,890
下面我用一个示例为大家展示一下这样做的理由

4
00:00:08,890 --> 00:00:13,210
基本而言 现实中是几乎不会出现逻辑如此简单的代码

5
00:00:13,210 --> 00:00:16,190
即便如此 你可能也不愿意重复输入相同代码

6
00:00:16,190 --> 00:00:18,220
如果我们的代码是这样呢？

7
00:00:18,220 --> 00:00:21,340
显然我并不愿意在每次移动车辆时

8
00:00:21,340 --> 00:00:22,900
都再次输入这段代码

9
00:00:22,900 --> 00:00:25,850
但将它提取为一个函数后

10
00:00:25,850 --> 00:00:28,680
我就可以很轻松地表明意图

11
00:00:28,680 --> 00:00:31,330
然后得出所需的改变之后的结果

12
00:00:31,330 --> 00:00:35,300
但更重要的一个原因是为了

13
00:00:35,300 --> 00:00:37,660
提升你的重构经验

14
00:00:37,660 --> 00:00:41,800
如果你已经决定了程序中的车辆运动方式

15
00:00:41,800 --> 00:00:44,050
那么在这段代码中你需要修改的地方只有一处

16
00:00:44,050 --> 00:00:46,950
变化将会在你调用函数的两处地方

17
00:00:46,950 --> 00:00:48,420
发生

18
00:00:48,420 --> 00:00:52,410
假设你想要改变程序中车辆运动的方式

19
00:00:52,410 --> 00:00:56,080
于是你添加了一个这样的方程式 虽然这个等式正好没有意义

20
00:00:56,080 --> 00:00:58,610
但是可以说你在这里添加了一个有意义的内容

21
00:00:58,610 --> 00:01:01,520
如果所有的运动逻辑都像这样列在同一处

22
00:01:01,520 --> 00:01:04,430
那么在修改完这个函数之后 你可以自信已经对程序循序做出了你想要的改变

23
00:01:04,430 --> 00:01:07,620
并可以开始正确运行程序了
