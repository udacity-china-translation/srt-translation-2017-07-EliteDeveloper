1
00:00:00,430 --> 00:00:03,804
我们来考虑一下还有哪些重复代码可以提取出来

2
00:00:03,804 --> 00:00:08,128
虽然这只是很小的一段代码 向新的车辆对象添加 .loc 属性的代码

3
00:00:08,128 --> 00:00:10,670
在这里重复出现了两次

4
00:00:10,670 --> 00:00:13,340
你认为我们该如何提取？

5
00:00:13,340 --> 00:00:17,520
我们可以采用之前反复使用过的

6
00:00:17,520 --> 00:00:19,180
写函数的方法

7
00:00:19,180 --> 00:00:21,630
将这个函数命名为 carlike

8
00:00:21,630 --> 00:00:25,840
因为它的作用就是为对象增加

9
00:00:25,840 --> 00:00:27,110
车辆所需的属性

10
00:00:27,110 --> 00:00:29,580
在这个极其简化的示例中

11
00:00:29,580 --> 00:00:32,280
我们写的函数几乎不做任何事情

12
00:00:32,280 --> 00:00:34,560
因为车辆似乎非常简单

13
00:00:34,560 --> 00:00:37,030
只含有 .loc 这一个属性

14
00:00:37,030 --> 00:00:39,991
但在真正的程序中 对象拥有更多属性

15
00:00:39,991 --> 00:00:44,308
所以这个函数 carlike 应该采用对象 car 为输入参数

16
00:00:44,308 --> 00:00:46,720
对其做一些事情 并返回

17
00:00:46,720 --> 00:00:49,320
当我们传入对象 car 时

18
00:00:49,320 --> 00:00:52,760
我们期望它能为我们将属性 .loc 添加到其中

19
00:00:52,760 --> 00:00:56,520
同样地 我们需要将位置的值传入 carlike

20
00:00:56,520 --> 00:00:59,140
这样它才知道将车辆位置的值设置到哪个地方

21
00:00:59,140 --> 00:01:02,669
一个像这样的函数 接受一个对象作为输入参数

22
00:01:02,669 --> 00:01:06,276
并为这个对象增加某些属性或功能

23
00:01:06,276 --> 00:01:09,270
这个函数 carlike 就可以被称为装饰器

24
00:01:09,270 --> 00:01:11,480
常用形容词为装饰器函数命名

25
00:01:11,480 --> 00:01:13,970
所以这里我们将其命名为 carlike
