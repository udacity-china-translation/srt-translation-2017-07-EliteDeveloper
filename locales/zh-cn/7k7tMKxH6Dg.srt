1
00:00:00,480 --> 00:00:02,848
这里有一种方法来迭代地定义 fibonacci

2
00:00:02,848 --> 00:00:04,152
[声音空白] 

3
00:00:04,152 --> 00:00:07,700
我们要通过跟踪运行轨迹 来避免所有的冗余计算

4
00:00:07,700 --> 00:00:10,552
我们将有两个变量 我要以一种稍微

5
00:00:10,552 --> 00:00:13,100
有点奇怪的方式来做 而我这样做的原因很快就

6
00:00:13,100 --> 00:00:15,490
清楚了 我想获得正确的答案

7
00:00:15,490 --> 00:00:18,630
当 n 为 0 和 1 的时候 先不考虑

8
00:00:18,630 --> 00:00:22,820
特殊情况 所以不是跟踪前两个

9
00:00:22,820 --> 00:00:26,500
我要跟踪当前的值 和一个想象的

10
00:00:26,500 --> 00:00:29,170
在它之后的值 我们知道前两个 fibonacci

11
00:00:29,170 --> 00:00:33,670
数字是 0 和 1 所以现在 current 是 0

12
00:00:33,670 --> 00:00:36,500
然后下一个 我们称之为 after 是 1

13
00:00:36,500 --> 00:00:38,760
所以这个是我们当前值的下一个

14
00:00:38,760 --> 00:00:41,880
现在我们有一个循环 我们将

15
00:00:41,880 --> 00:00:44,110
使 i 在 0 到 n 的范围内

16
00:00:44,110 --> 00:00:47,975
所以我们正在寻找 fibonacci(n) 这意味着我们

17
00:00:47,975 --> 00:00:51,390
要从 0 开始 current 的值是

18
00:00:51,390 --> 00:00:54,590
fibonacci(0) 的值 after 是 fibonacci(1) 的值

19
00:00:54,590 --> 00:00:57,140
当我们通过循环 我们将不断

20
00:00:57,140 --> 00:01:00,820
更新它们 我们想要通过遵循递归规则来

21
00:01:00,820 --> 00:01:04,060
更新它们 这意味着 current 的新值

22
00:01:04,060 --> 00:01:07,270
是 after 的当前值

23
00:01:07,270 --> 00:01:09,220
after 的新值 是它们的和 即

24
00:01:09,220 --> 00:01:12,290
current + after 我们可以用一个多重

25
00:01:12,290 --> 00:01:15,630
赋值 这将使我们省去一个临时变量 我们

26
00:01:15,630 --> 00:01:19,690
可以将新值分别赋值给 current 和 after

27
00:01:19,690 --> 00:01:22,730
current 的新值 是 after 的当前值

28
00:01:22,730 --> 00:01:28,930
after 的新值 是 correct + after 所以 这就是

29
00:01:28,930 --> 00:01:31,920
多重赋值的灵活运用 如果我们

30
00:01:31,920 --> 00:01:34,380
没有使用多重赋值 我们必须在赋值时

31
00:01:34,380 --> 00:01:36,230
使用一个临时变量来跟踪其中的一个值

32
00:01:36,230 --> 00:01:39,570
但是有了多重赋值 我们首先同时获取它们

33
00:01:39,570 --> 00:01:42,240
两个的值 然后将它们赋值给左侧的

34
00:01:42,240 --> 00:01:44,840
两个变量 所以 这就是我们需要的全部 接下来

35
00:01:44,840 --> 00:01:47,690
在循环后 我们应该返回 current 的值

36
00:01:47,690 --> 00:01:51,540
如果我们正在寻找 fibonacci(n) 这就是

37
00:01:51,540 --> 00:01:54,920
那个数 所以让我们试试看 所以我们

38
00:01:54,920 --> 00:01:59,830
应该能够看到 fibonacci(0) 结果

39
00:01:59,830 --> 00:02:02,530
应该是0 这正是我们得到的

40
00:02:02,530 --> 00:02:04,500
因为这是 current 的值 当范围从

41
00:02:04,500 --> 00:02:06,000
0 到 0 时 我们根本不通过循环

42
00:02:06,000 --> 00:02:09,868
所以我们得到值 1 (此处应是口误) 让我们检查

43
00:02:09,868 --> 00:02:16,510
fibonacci(1) 我们运行它 得到值 1 这也是

44
00:02:16,510 --> 00:02:20,790
我们的期望值 我们获得这个值是因为我们经过了 1 次循环

45
00:02:20,790 --> 00:02:24,530
将从 1 开始的 after 的值 赋值给 current 也就是

46
00:02:24,530 --> 00:02:29,440
我们返回的 current 的值 我们可以继续 我们将尝试 fibonacci(2)

47
00:02:31,570 --> 00:02:36,064
结果也是 1 正如我们期望的 然后 fibonacci(3)

48
00:02:36,064 --> 00:02:40,136
应该是 1+1 我们得到 2 等等

49
00:02:40,136 --> 00:02:41,360
[声音空白] 

50
00:02:43,430 --> 00:02:45,990
好了 看起来它工作了 我们已经试过

51
00:02:45,990 --> 00:02:48,904
几个简单的例子 让我们试试 fibonacci(33)

52
00:02:48,904 --> 00:02:51,830
我们在之前的练习中估计过 为了

53
00:02:51,830 --> 00:02:55,911
计算 fibonacci(36) 使用之前的递归定义 

54
00:02:55,911 --> 00:03:00,550
我们将需要 fibonacci(33) 次调用 所以为什么

55
00:03:00,550 --> 00:03:02,448
代码需要花费这么长的时间来运行？所以

56
00:03:02,448 --> 00:03:06,940
fibonacci(33) 的值是多少？这就是

57
00:03:06,940 --> 00:03:09,870
它的值 是 350 万次调用

58
00:03:09,870 --> 00:03:12,895
因此 即使处理器每秒处理十亿条指令

59
00:03:12,895 --> 00:03:15,645
做 350 万次递归调用也需要

60
00:03:15,645 --> 00:03:18,598
相当长的时间 每次通过调用都

61
00:03:18,598 --> 00:03:22,138
不仅仅是一条指令 它有成千上万的指令 所以这

62
00:03:22,138 --> 00:03:24,930
开始花费太多的时间使我们看不到结果 

63
00:03:24,930 --> 00:03:29,890
并且 不仅是调用了 fibonacci(33) 次的 fibonacci(2)

64
00:03:29,890 --> 00:03:31,680
为了获取 fibonacci(36) 我们还有所有

65
00:03:31,680 --> 00:03:35,450
其他的事情要做 但让我们看看 现在我们有了

66
00:03:35,450 --> 00:03:40,450
更快的 迭代的 fibonacci 定义 其不会做所有的冗余

67
00:03:40,450 --> 00:03:45,480
工作 我们可以计算 fibonacci(36) 了 所以我们获得了这个值

68
00:03:45,480 --> 00:03:50,456
表明了使用 fibonacci 模型 3 年后将有

69
00:03:50,456 --> 00:03:55,310
约 1500 万只兔子 让我们试试我们已经过了 5 年

70
00:03:55,310 --> 00:04:00,700
传入 60 个月 然后我们

71
00:04:00,700 --> 00:04:03,060
得到的数字 开始变得相当巨大

72
00:04:03,060 --> 00:04:06,590
为了尝试认知这个数字 让我们来看看

73
00:04:06,590 --> 00:04:09,120
所有出生的兔子的质量

74
00:04:09,120 --> 00:04:12,410
将需要多长时间超过

75
00:04:12,410 --> 00:04:23,376
地球的质量 所以 地球的质量是 5.9722 * 10**24

76
00:04:23,376 --> 00:04:26,902
以千克为单位 我使用的 ** 符号

77
00:04:26,902 --> 00:04:30,370
这表示的是 幂 所以这里

78
00:04:30,370 --> 00:04:36,030
是 10 的 24 次幂 这是 5.9 乘以 10 的 24 次幂的一种写法

79
00:04:36,030 --> 00:04:40,140
为了演示一下幂符号 这里是

80
00:04:40,140 --> 00:04:42,520
2 的 10 次幂 所以我们将看到结果是

81
00:04:42,520 --> 00:04:45,470
1,024 这是我们通过 2 乘以 2

82
00:04:45,470 --> 00:04:48,120
乘以 2 乘以 2 … 10 次 我们在这里

83
00:04:48,120 --> 00:04:51,550
将 10 乘以自身 24 次 这是一个

84
00:04:51,550 --> 00:04:55,910
对地球质量的很好的估计 所以现在为了

85
00:04:55,910 --> 00:04:58,560
解出需要多少个月 兔子质量将

86
00:04:58,560 --> 00:05:00,910
超过地球质量

87
00:05:00,910 --> 00:05:03,440
我们将有一个 for 循环 我们要从

88
00:05:04,470 --> 00:05:07,720
fibonacci 数字循环 直到我们获得一个数字

89
00:05:07,720 --> 00:05:12,070
其超过了地球的质量 我们还需要决定一只兔子的质量

90
00:05:12,070 --> 00:05:15,390
我想假设一只兔子重约 2 公斤

91
00:05:15,390 --> 00:05:20,090
这是一个对兔子重量不错的猜测

92
00:05:20,090 --> 00:05:22,510
这是假设 当然是像如今

93
00:05:22,510 --> 00:05:25,490
这样良好喂养的兔子 而不是像

94
00:05:25,490 --> 00:05:28,510
斐波纳契模型那样快速传播后的兔子

95
00:05:28,510 --> 00:05:32,880
所以 我们将写一个循环来看什么时候

96
00:05:32,880 --> 00:05:35,640
兔子的质量超过地球的

97
00:05:35,640 --> 00:05:38,140
质量 我们将从 n=1 开始

98
00:05:38,140 --> 00:05:43,120
我们将继续 直到 fibonacci(n)

99
00:05:43,120 --> 00:05:46,680
超过地球的质量 所以 我们将计算

100
00:05:46,680 --> 00:05:51,690
fibonacci(n) 乘以兔子的质量

101
00:05:51,690 --> 00:05:53,870
所以 fibonacci(n) 给我们兔子

102
00:05:53,870 --> 00:05:55,890
在月底的数量 乘以兔子的

103
00:05:55,890 --> 00:05:58,050
质量 然后只要它比

104
00:05:58,050 --> 00:06:00,780
地球的质量要小 地球对

105
00:06:00,780 --> 00:06:03,640
人类来说就仍然安全 或者至少还有一些空间

106
00:06:03,640 --> 00:06:07,750
留给人类 每次经过循环

107
00:06:07,750 --> 00:06:10,210
我们将 n 增加 1 在循环结束时

108
00:06:10,210 --> 00:06:12,140
我们将打印出 n 的值

109
00:06:12,140 --> 00:06:15,800
我们将看到我们得到了什么 让我们也打印出

110
00:06:15,800 --> 00:06:18,850
fibonacci(n) 的值 来看看这个 n

111
00:06:18,850 --> 00:06:23,180
对应的斐波那契数字有多大 所以我们会继续

112
00:06:23,180 --> 00:06:26,170
经过循环 只要 n 的斐波那契数 乘以

113
00:06:26,170 --> 00:06:28,000
兔子质量 小于地球的质量

114
00:06:28,000 --> 00:06:31,800
一旦我们停止循环 这意味着我们已经超过

115
00:06:31,800 --> 00:06:34,210
地球的质量 然后我们将看到结果是什么

116
00:06:34,210 --> 00:06:38,570
所以让我们尝试运行它 然后 我们得到了这个结果

117
00:06:38,570 --> 00:06:41,880
n 的值为 119 所以它只需要 119 个月 或者

118
00:06:41,880 --> 00:06:45,490
仅仅是不到 10 年 兔子的质量就会超过

119
00:06:45,490 --> 00:06:48,520
地球的质量 这是我们那时会有的

120
00:06:48,520 --> 00:06:51,428
兔子数量 一个相当大的数字 你应该

121
00:06:51,428 --> 00:06:54,160
非常害怕所有这些兔子 好消息是

122
00:06:54,160 --> 00:06:57,580
这只是斐波那契模型 实际上是不正确的 这是

123
00:06:57,580 --> 00:06:59,440
兔子繁殖的数学抽象

124
00:06:59,440 --> 00:07:02,200
真正的兔子实际上会

125
00:07:02,200 --> 00:07:05,120
在某个点之后就死亡 而且如果有太多的兔子

126
00:07:05,120 --> 00:07:07,240
它们没有足够的食物 所以它们不会一直

127
00:07:07,240 --> 00:07:10,750
像斐波那契数字一样成长 然后占领整个星球

128
00:07:10,750 --> 00:07:13,900
所以如果斐波纳契模型是正确的话 我们应该非常害怕 

129
00:07:13,900 --> 00:07:17,810
只需要 10 年时间 兔子就会占领整个星球

130
00:07:17,810 --> 00:07:22,200
并且比地球本身更重 好消息是 这不是一个

131
00:07:22,200 --> 00:07:24,720
关于兔子繁殖的准确模型

132
00:07:24,720 --> 00:07:26,530
它们不会永远活着 一旦有

133
00:07:26,530 --> 00:07:27,940
太多的兔子 它们就开始食物不足了

134
00:07:27,940 --> 00:07:30,750
所以它们会停止繁殖 停止生存

