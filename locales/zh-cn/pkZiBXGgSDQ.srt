1
00:00:00,550 --> 00:00:02,259
总而言之 我们看到了 Espresso

2
00:00:02,259 --> 00:00:05,500
如何帮助我们测试视图和调整视图

3
00:00:05,500 --> 00:00:08,949
的各种 UI 部件 以及简化 intent 测试

4
00:00:08,949 --> 00:00:10,839
现在我们来看 Espresso 测试的最强项

5
00:00:10,839 --> 00:00:14,899
测试闲置资源

6
00:00:14,900 --> 00:00:16,870
那么什么是闲置资源 以及你如何

7
00:00:16,870 --> 00:00:18,609
发现它呢？

8
00:00:18,609 --> 00:00:20,469
要理解这个新概念

9
00:00:20,469 --> 00:00:22,239
你可以想象这样一个情形

10
00:00:22,239 --> 00:00:25,179
假设你在创建下一个大的激励性引言分享

11
00:00:25,179 --> 00:00:27,679
应用 用户只需点击一个按钮

12
00:00:27,679 --> 00:00:30,129
便可以按需获得一些激励性的语句

13
00:00:30,129 --> 00:00:32,949
所有可能的引言不会本地存储

14
00:00:32,950 --> 00:00:34,120
在你的手机上

15
00:00:34,119 --> 00:00:36,640
相反 当按钮被点击后

16
00:00:36,640 --> 00:00:38,829
会发起一个 AsyncTask 它会从服务器

17
00:00:38,829 --> 00:00:40,689
拉取引言

18
00:00:40,689 --> 00:00:43,419
如果我们要运行一个基本的 Espresso 测试

19
00:00:43,420 --> 00:00:45,460
并想检查包含激励性引言的

20
00:00:45,460 --> 00:00:47,585
TextView 是否加载了

21
00:00:47,585 --> 00:00:49,210
这里 如果我们不考虑文本

22
00:00:49,210 --> 00:00:52,780
出现在屏幕上所需的加载时间
the text to appear on screen.

23
00:00:52,780 --> 00:00:56,002
我们的测试将大大地失败

24
00:00:56,002 --> 00:00:57,460
为了将异步后台工作

25
00:00:57,460 --> 00:01:00,439
发生的时间考虑在内

26
00:01:00,439 --> 00:01:02,949
我们需要实现闲置资源

27
00:01:02,950 --> 00:01:04,861
它具有时间延迟 允许我们

28
00:01:04,861 --> 00:01:06,820
等待异步后台工作完成后

29
00:01:06,819 --> 00:01:10,079
再继续测试

30
00:01:10,079 --> 00:01:13,399
这是一般过程的图

31
00:01:13,400 --> 00:01:16,150
如果你的代码有一些异步任务

32
00:01:16,150 --> 00:01:19,510
Espresso 可以帮助管理何时运行测试

33
00:01:19,510 --> 00:01:22,150
假设有一项 Espresso 测试在检查从主线程

34
00:01:22,150 --> 00:01:24,340
上开始的一个进程

35
00:01:24,340 --> 00:01:26,469
此进程需要一些后台工作

36
00:01:26,469 --> 00:01:28,269
所以它转向 AsyncTask

37
00:01:28,269 --> 00:01:30,339
那么 在没有设置闲置资源的情况下

38
00:01:30,340 --> 00:01:33,850
Espresso 测试会一直继续运行下去

39
00:01:33,849 --> 00:01:36,039
而不等待 AsyncTask 完成

40
00:01:36,040 --> 00:01:38,859
最终导致测试失败 尽管一切

41
00:01:38,859 --> 00:01:40,810
可能运行正常

42
00:01:40,810 --> 00:01:44,109
而如果实现了闲置资源

43
00:01:44,109 --> 00:01:46,429
那么在 AsyncTask 开始时 Espresso 将

44
00:01:46,430 --> 00:01:49,900
暂停测试 直到后台任务结束

45
00:01:49,900 --> 00:01:52,660
然后会在设备闲置时重新继续

46
00:01:52,659 --> 00:01:55,509
也就是 AsyncTask 完成时

47
00:01:55,510 --> 00:01:58,969
这会使我们获得准确的测试结果

48
00:01:58,969 --> 00:02:02,049
简单来说 如果主线程上

49
00:02:02,049 --> 00:02:05,450
有进程在运行 那么当发生后台工作时

50
00:02:05,450 --> 00:02:08,050
Espresso 将等待 直到应用空闲后

51
00:02:08,050 --> 00:02:10,330
才继续运行测试

52
00:02:10,330 --> 00:02:14,510
这里的闲置是指没有任何 Activity 在进行

53
00:02:14,509 --> 00:02:17,289
也就是说 在当前消息队列中没有


54
00:02:17,289 --> 00:02:20,799
UI 事件 且默认的 AsyncTask 线程池中没有更多任务时 

55
00:02:20,800 --> 00:02:22,270
它将是闲置的

56
00:02:22,270 --> 00:02:24,990
凭借对闲置资源的这些理解

57
00:02:24,990 --> 00:02:26,800
我想让你完成以下小测试

58
00:02:26,800 --> 00:02:30,130
帮助识别何时使用和不使用

59
00:02:30,129 --> 00:02:32,169
闲置资源的一些实际解决方案 然后

60
00:02:32,169 --> 00:02:34,389
我们将在 TeaTime 中来实际实现

61
00:02:34,389 --> 00:02:37,379
闲置资源

