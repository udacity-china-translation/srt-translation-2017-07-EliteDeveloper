1
00:00:00,714 --> 00:00:06,773
学生 Brian Yee 提问 我们这门课使用 Python 2  但是已有 Python 3

2
00:00:06,774 --> 00:00:10,426
我们正在学习的是过时的吗?  它在现实世界对我们没有帮助?

3
00:00:10,426 --> 00:00:12,259
好 很清楚的问题

4
00:00:12,259 --> 00:00:17,297
有一个较新版本的 Python   几乎我们在这门课学到的每件事

5
00:00:17,297 --> 00:00:22,094
无论你使用 Python、JavaScript、Schem、C 或 Java  都没关系

6
00:00:22,094 --> 00:00:25,218
任何程序或语言 我们学到的基本概念  真的以相同的方式

7
00:00:25,219 --> 00:00:28,173
适用于所有这些语言

8
00:00:28,172 --> 00:00:32,254
现在 身为程序设计师发展技能  对学习不同的语言是很有用的

9
00:00:32,255 --> 00:00:34,801
不同的语言做事的方式稍有不同

10
00:00:34,801 --> 00:00:37,204
前一个问题 我们谈到了 pythonic 的方式

11
00:00:37,204 --> 00:00:40,695
pythonic 的方式是以 Python 做事的最佳方法

12
00:00:40,695 --> 00:00:43,942
它真的充分利用 Python 程序设计师所期望的 设计与风格

13
00:00:43,942 --> 00:00:49,070
Python 3 不同于 Python 2  在某些方面没有太大差异

14
00:00:49,070 --> 00:00:52,005
所以几乎你在课程中写的程序 都能运作于 Python 3

15
00:00:52,005 --> 00:00:54,728
在 Python 3 也是相同的方法来写

16
00:00:54,728 --> 00:00:58,597
有些则不同 今天 大部分的程序码

17
00:00:58,597 --> 00:01:02,051
Python 2 的使用 仍比 Python 3 更为广泛

18
00:01:02,051 --> 00:01:06,375
在 Python 3 有一点不相容 也就是说  很难移动以 Python 2 写的程序库 (library)

19
00:01:06,375 --> 00:01:09,825
到 Python 3

20
00:01:09,825 --> 00:01:12,781
我们使用的基础建设 在 Python 2 都能运作  Python 3 则未必

21
00:01:12,781 --> 00:01:16,537
这就是我们使用 Python 2

22
00:01:16,537 --> 00:01:18,337
而不是 Python 3 的真正原因

23
00:01:18,337 --> 00:01:21,468
但基本上 你学到的所有内容都是相同的

24
00:01:21,468 --> 00:01:24,290
如果你开始写 Python 3 程序码 这些会很容易转换

25
00:01:24,290 --> 00:01:27,408
某些东西会有点不同 而可能最值得注意的不同之处是

26
00:01:27,408 --> 00:01:29,947
print 会以不同的方式工作

27
00:01:29,947 --> 00:01:33,746
所以你已经写的程序码里  使用的 print 在 Python 3 无法运作

28
00:01:33,746 --> 00:01:35,959
你必须为它加上额外的括弧

29
00:01:35,959 --> 00:01:38,381
否则 一切真的是相同的

30
00:01:38,381 --> 00:01:43,152
没有不同的概念 只是在不同的语言

31
00:01:43,152 --> 00:01:47,000
稍有不同的定义
